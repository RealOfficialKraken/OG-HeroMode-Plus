;;-*-Lisp-*-
(in-package goal)

;; name: game-info-h.gc
;; name in dgo: game-info-h
;; dgos: ENGINE, GAME

(declare-type entity-perm-array inline-array-class)
(declare-type continue-point basic)
(declare-type game-save basic)



;(print help) in repl to see this
(define help "
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
What are the commands to set your Green Eco or Gun Mod?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ALL WEAPON MODS ARE TOGGLED OFF BY DEFAULT, ONCE YOU SET IT ON AND SAVE, THERES NO GOING BACK ON YOUR SAVE.
you can set weapon mods to be on via (set! weapon-mod-toggle #t) 
(this will choose a random modifier for you)
R3 to open the HeroMode+ menu
------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEAPON MODS: Each weapon mod will come with the option boolean, and an integer (which is referred in example as V) storing from 1-4 defining the selected gun. 1=Yellow, 2=Red, 3=Blue, 4=Dark
All of these changes are done in target-gun.gc
Example:
(set! rapid-fire-option #t)
(set! rapid-fire-int V)
------------------------------------------------------------------------------------------------------------------------------------------------------------------
rapid-fire-option                 Fire rate increased dramatically
rapid-fire-int
double-tap-option                 Every shot has a chance to fire a second without consuming ammo
double-tap-int
infinite-range-option             Every shot follows newtons law              (not working)
infinite-range-int                (meaning every shot has a max range of 999)
big-shot-option                   bigger bullets, bigger hitbox, right?       (not working)
big-shot-int
mag-bag-option                    x3 the ammo on the weapon its attached to (not implemented yet)
mag-bad-int
pm-extra-shot-option              Every shot has a chance to fire a peacemaker shot :) (this can also be pulled as a legendary)
pm-extra-shot-int
predator-shot-option              Every shot has a good chance to spawn a predator shot with it
predator-shot-int                 (this is deprecated, pred shot is in random-shot only, still works for the most part)
guard-shot-option                 Every shot has a good chance to spawn a guard shot with it
guard-shot-int
leg-random-shot                   Your gun can fire every shot known to man.
leg-random-int
Every guard that spawns will have a chance to drop a legendary weapon mod. All others are done via missions or burning-bush.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
GREEN ECO MODS(modifiers): Each mod works differently, but I keep all of it on a toggle boolean.
Example: (set! peacemaker-ability #t)
------------------------------------------------------------------------------------------------------------------------------------------------------------------
peacemaker-ability                at any given points in the game, jak has a chance to fire 100 peacemaker shots out of his gun
                                  but you must one-hit every boss fight in the game.
tp-fb                             upon death, theres a good chance jak will respawn at the final boss fight,
                                  BUT the final boss is extremely unfair, no saving is allowed, and no checkpoints are stored.
hover-damage                      Your hoverboard goes much faster, tricks virtually mean nothing for speed
                                  but mostly all enemies (except guards in traffic) have X5 HP. (oof)
dark-traffic                      Every dark eco you collect has a chance to fill your darkjak meter 100%
                                  but any time jak angers the guards, its max alert level
trip-metalheads                   jumping, punching, spinning, rolling, or shooting can make jak trip at a low chance
                                  but every time this happens, you get 10 free metal-head gems (cooldown 2000 frames)
target-explode                    jak has a bomb strapped to his chest and if he takes damage he has a chance of exploding
                                  but dark jak lasts a lot longer
hell-mode-option                  enabled automatically when in hero-mode. This enables all modifiers }:) good luck
------------------------------------------------------------------------------------------------------------------------------------------------------------------
"
)



#|
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
YOU CAN READ THIS PART YOU WANT, YOU DONT HAVE TO :) These are ideas of mine to keep track of. Note that some are dated and this is more of a refernece for me..
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Upon loading for the first time in fortress, you will be given the option to choose one or to choose none.
then upon choosing, it saves a value attached to the option, a 1 or 0, to the save file directly
then an updating code block will check for a 1 or 0 and will actively set the corresponding mod a #t or symbol
It is required to choose one to gain access to the weapon mods menu. (IE if all 0, then the setting for gun mods in the secrets menu does not appear)

(define-extern traffic-nuke-option symbol) ;;this is define-extern for if its over all chosen
(define-extern traffic-nuke-save 0) ;;this is define-extern to set the gun for the option

jak does has a chance to cause 50 peacemaker shots to ring out in all directions.
But bosses must be one hit.

(define-extern trip-metalheads-option symbol)
(define-extern trip-metalheads-save 0)
Any input has a very small chance for Jak to get hurt with 0 damage,
but every time that happens you gain 50 metal head gems

(define-extern input-teleport-option symbol)
(define-extern input-teleport-save 0)
each time jak dies, it has a small chance to respawn jak to the final boss checkpoint.
but the final boss fight is extremely unfair.
the checkpoint is not stored or saved, nor is the save accessible during bossfight.
essentially you tp to boss, have a fun time in hell, die, then come back to your original checkpoint.

(define-extern ambush-tricks-option symbol)
(define-extern ambush-tricks-save 0)
any input rolls between 1-600. If it's 1, ambush jak.
you get the damage buff at this very moment
ambush: 6 cloaked metalheads spawn in a radius around jak. (it can be a static position honestly, makes it more hilarious)

(define-extern hell-mode-option symbol)
(define-extern hell-mode-save 0)
once a hero mode save is made, all options listed above are active at once in that save,
but you get legendary gun mods :) 





GUNMOD Shark (legendary)
Chance not to consume ammo

GUNMOD Mehrunes (legendary)
1/25 chance to instant kill

GUNMOD Random (legendary)
High chance to fire a random projectile alongside your gun

GUNMOD Explode (legendary)
All shots explode
------------------------------------------------------------------------------------------------------------------------------------------------------------------


CURRENT BUGS:
- GE PEACEMAKER_ABILITY: peacemaker weapon has to be available for peacemaker-ability to not crash the game upon trigger, so player starts with all weapons.
- GM PRED/GUARD SHOT: firing the guard or predator shot sets jak invulnerable for 3 frames until I can figure a way to not damage jak when firing
- GM PRED/GUARD SHOT: making jak invulnerable in this state turns off all the other game-secrets
- GM PREDATOR SHOT: firing the predator shot outside of ctywide and ctyport crashes the game
- GM BOARD PICKUP: the random gunmod trigger will happen upon drop, not upon pickup, but not for things like giving gems, that will be upon pickup >:[
  |#


#|;;;;;;;;;;;;;;;;;;;;;;;;;;
;      Var Definitions     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;|#



















#|
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
YOU CAN READ THIS PART YOU WANT, YOU DONT HAVE TO :) These are ideas of mine to keep track of. Note that some are dated and this is more of a refernece for me..
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Upon loading for the first time in fortress, you will be given the option to choose one or to choose none.
then upon choosing, it saves a value attached to the option, a 1 or 0, to the save file directly
then an updating code block will check for a 1 or 0 and will actively set the corresponding mod a #t or #f
It is required to choose one to gain access to the weapon mods menu. (IE if all 0, then the setting for gun mods in the secrets menu does not appear)

(define traffic-nuke-option #f) ;;this is defined for if its over all chosen
(define traffic-nuke-save 0) ;;this is defined to set the gun for the option

jak does has a chance to cause 50 peacemaker shots to ring out in all directions.
But bosses must be one hit.

(define trip-metalheads-option #f)
(define trip-metalheads-save 0)
Any input has a very small chance for Jak to get hurt with 0 damage,
but every time that happens you gain 50 metal head gems

(define input-teleport-option #f)
(define input-teleport-save 0)
each time jak dies, it has a small chance to respawn jak to the final boss checkpoint.
but the final boss fight is extremely unfair.
the checkpoint is not stored or saved, nor is the save accessible during bossfight.
essentially you tp to boss, have a fun time in hell, die, then come back to your original checkpoint.

(define ambush-tricks-option #f)
(define ambush-tricks-save 0)
any input rolls between 1-600. If it's 1, ambush jak.
you get the damage buff at this very moment
ambush: 6 cloaked metalheads spawn in a radius around jak. (it can be a static position honestly, makes it more hilarious)

(define hell-mode-option #f)
(define hell-mode-save 0)
once a hero mode save is made, all options listed above are active at once in that save,
but you get legendary gun mods :) 





GUNMOD Shark (legendary)
Chance not to consume ammo

GUNMOD Mehrunes (legendary)
1/25 chance to instant kill

GUNMOD Random (legendary)
High chance to fire a random projectile alongside your gun

GUNMOD Explode (legendary)
All shots explode
------------------------------------------------------------------------------------------------------------------------------------------------------------------


CURRENT BUGS:
- GE PEACEMAKER_ABILITY: peacemaker weapon has to be available for peacemaker-ability to not crash the game upon trigger, so player starts with all weapons.
- GM PRED/GUARD SHOT: firing the guard or predator shot sets jak invulnerable for 3 frames until I can figure a way to not damage jak when firing
- GM PRED/GUARD SHOT: making jak invulnerable in this state turns off all the other game-secrets
- GM PREDATOR SHOT: firing the predator shot outside of ctywide and ctyport crashes the game
- GM BOARD PICKUP: the random gunmod trigger will happen upon drop, not upon pickup, but not for things like giving gems, that will be upon pickup >:[
  |#


#|;;;;;;;;;;;;;;;;;;;;;;;;;;
;      Var Definitions     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;|#

;Modifier Definitions (gun-mod definitions in target-gun.gc)
(define tp-fb-win #f)
(define mod-reroll #f) ;toggle on to reroll your current mod for 10 metalhead gems
(define mod-rand 0)
(define mod-pick #f)

(define auto-save-delayed? #f)
(define auto-save-frame 0)

(define hell-mode-option #f) ;toggle on to set hell-mode on (just turn on hero-mode)

(define weapon-mod-toggle #f) ;The option thats asked at the beginning, toggling this on will choose a random modifier for jak.
(define wm-drop #f) ;Turns on weapon mods dropping off the next spawned enemy that can drop mods.
(define wm-leg #f) ;sees if a legendary has dropped, if toggled on, the game will never drop a legendary
(define wm-roll-rand #f)
(define wm-roll-numb 0)
(define wm-rand-shot #f) ;toggle on to enable random shot, a legendary gun mod
(define wm-roll-shot 0)
(define inv-frames? #f)



(define test-option #f) ;test projectile
(define mod-all-yellow #f) ;sets all gunmods to yellow gun
(define mod-all-blue #f) ;sets all gunmods to blue gun
(define mod-all-red #f) ;sets all gunmods to red gun
(define mod-all-dark #f) ;sets all gunmods to peacemaker
(define mod-all-off #t)
(define-extern mod-turning-off symbol)

(define peacemaker-ability #f)  ; Chance to encumber in peacemaker shots, bosses are 1 hit
(define pm-shot-counter 0)
(define-extern gun-dark-present? symbol)
(define pm-offset-y (new 'static 'vector :x (meters 0) :y (meters 2) :z (meters 0) :w 1.0))

(define tp-fb #f) ; toggle on for a chance to teleport for final boss upon death
(define start-tp #f)
(define new-game-s? #f)
(define frame-count 0)
(define start-frame-count #f)
(define going-back-tp #f)
(define stored-cp? #f)
(define pause-menu-blocked? #f)
(define-extern tp-fb-win symbol)
(define load-state-tp 0)
(define start-death-timer-i #f)
(define death-timer-i 0)
(define death-timer-cdr #f)
(define death-timer-cdi 0)
(define rapid-fire-blue-frame 0)
(define already-died? #f)
(define jakisntdead #t)

(define tp-fb-2 #f)
(define tp-framec 0)
(define start-tp-framec #f)

(define hover-damage #f) ;toggle on to enable hoverboard mechanics, but enemies have X5 HP

(define dark-traffic #f) ;toggle on for a chance to get darkjak meter to full off any dark eco, but traffic-alert-4 is set for any illegal activity

(define trip-metalheads #f) ;toggle on for a chance to trip, but jak will get 10 metalhead gems every time (on cooldown 4000 frames)
(define trip-start #f)
(define trip-cooldown 0)
(define bomb-setoffp3 "data/goal_src/jak2/pc/csounds/bomb-setoff3.mp3")
(define bomb-setoffp2 "data/goal_src/jak2/pc/csounds/bomb-setoff2.mp3")
(define bomb-setoffp "data/goal_src/jak2/pc/csounds/bomb-setoff.mp3")
(define bomb-explodep "data/goal_src/jak2/pc/csounds/ww2-explode.mp3")
(define target-explode #f) ;toggle on for jak to explode upon taking damage, but dark-jak lasts much longer.
(define target-explode-start #f)
(define explode-frames 0)
(define explode-frame-start #f)
(define explode-fstart #f)
(define explode-f 0)
(define r-bomb-setoff 0)
(define dark-jacked? #f)
(define dark-jacked! #f)
(define rand-setting? #f)
(define rand-setting-c 0)
(define targetec-start #f)
(define targetec-count 0)

(define gungame-ammorefill #f)

(define dt-frame-start #f)
(define dt-count 0)
(define dt-control #f)

(define leg-got? #f)
(define-extern leg-random-int int)
(define leg-random-shot #f)
(define leg-dont-fire? #f)

(define mod-default-gun 1)

(define all-modifiers-off? #f)
(define mission-grab-1 #f) ;sets mission get for weapon mods
(define mission-grab-2 #f) ;sets mission get for weapon mods
(define mission-grab-3 #f) ;sets mission get for weapon mods
(define mission-grab-4 #f) ;sets mission get for weapon mods
(define orb-grab-1 #f) ;sets weapon mod after certain # of orbs
(define orb-grab-2 #f)
(define orb-grab-3 #f)

(define mushroom-movies #f)
(define mushie-unlocked? #f)
(define movie-int 0)
(define mushroom-movies-start #f)
(define mushroom-var 0)

(define pickup-save #f)
(define pickup-frame 0)

;cty-guard-turret spawn params
(define spawned-turret-hideout? #f)
(define spawned-turrets-port? #f)
(define spawned-turrets-pal? #f)
(define spawned-turret-vin? #f)
(define spawned-turret-market? #f)

;menu vars
(define in-menu #f)
(define menu-slot 0)
(define menu-pressed? #f)
(define sub-menu-slot 0)
(define menu-activate #f)
(define weapon-id 0)
(define wait-frame 0)
(define wait-start #f)
(define wait-frame2 0)
(define wait-frame-start2 #f)
(define camera-locked #f)
(define string-printed? #f)
(define strong2-printed? #f)
(define press-and-hold #f)
(define press-frame 0)
(define recieved-gm #f)
(define recieved-gm2 #f)
(define recieved-gm3 #f)
(define recieved-gm4 #f)
(define recieved-gm5 #f)
(define recieved-gm6 #f)
(define recieved-gm7 #f)
(define recieved-gm8 #f)
(define recieved-gm9 #f)
(define recieved-gm10 #f)
(define gm-frame 0)
(define gm-start #f)
(define gm-frame2 0)
(define gm-start2 #f)
(define gm-frame3 0)
(define gm-start3 #f)
(define gm-frame4 0)
(define gm-start4 #f)
(define gm-frame5 0)
(define gm-start5 #f)
(define gm-frame6 0)
(define gm-start6 #f)
(define gm-frame7 0)
(define gm-start7 #f)
(define gm-frame8 0)
(define gm-start8 #f)
(define gm-frame9 0)
(define gm-start9 #f)
(define gm-frame10 0)
(define gm-start10 #f)
(define gm-weapon-id 0)
(define weapon-toggle-false? #f)
(define-extern death-counter-s string)
(define-extern death-counter-int int)
(define in-menu-2 #f)
(define yes-no #f)
(define menu2-wait #f)
(define menu2-frame 0)
(define true-pause #f)
(define popup-hint #f)
(define hint-start #f)
(define hint-numb 0)
(define hint-printed? #f)
(define popup-hint2 #f)
(define hint-start2 #f)
(define hint-numb2 0)
(define hint-printed?2 #f)
(define error-hint #f)
(define error-frame 0)
(define error-start #f)
(define popup3-start #f)
(define popup-time 0)
(define popup-tpfb-n #f)
(define popup-tpfb-tn 0)
(define popup-tpfb-h #f)
(define popup-tpfb-th 0)
(define-extern recieved-gm-s string)
(define-extern recieved-gm-s2 string)
(define-extern recieved-gm-s3 string)
(define-extern recieved-gm-s4 string)
(define-extern recieved-gm-s5 string)
(define-extern recieved-gm-s6 string)
(define-extern recieved-gm-s7 string)
(define-extern recieved-gm-s8 string)
(define-extern gun-string string)
(define-extern mod-string string) 
(define-extern gun-mod-string string)
(define-extern modifier-string string)
(define-extern mod-reroll-string string)
(define gs1 #f)
(define gs2 #f)
(define gs3 #f)
(define gs4 #f)
(define gs5 #f)
(define gs6 #f)
(define gs7 #f)
(define gs8 #f)
(define disable-mm 0)
(define-extern disable-mms string)
(define done-it #f)

(define pm-shot-trigger #f) ;these had to be placed here due to load order

(define inv-frame-start #f)
(define inv-frame-counter 0)
(define inv-frame-start-g #f)
(define inv-frame-counter-g 0)
(define-extern leg-random-shot symbol)
(define-extern wm-rand-shot symbol)
(define leg-random-int 0)
(define-extern bounce-shot symbol)
(define-extern bounces-left int)
(define bounce-shot-int 0)
(define big-shot-option #f)
(define big-shot-int 0)
(define mag-bag-option #f)
(define mag-bag-int 0)
(define guard-grenade-option #f)
(define guard-grenade-int 0)
(define-extern someone-fire-guard-grenade (function process-drawable vector vector (pointer process)))
(define-extern someone-fire-guard-shot (function process-drawable vector vector (pointer process)))
(define-extern someone-fire-red (function process-drawable vector vector (pointer process)))
(define-extern someone-fire-blue (function process-drawable vector vector (pointer process)))
(define-extern someone-fire-dark (function process-drawable vector vector (pointer process)))
(define firingthegun #f)
(define mehrunes-shot-option #f)
(define mehrunes-shot-int 0)
(define mehrunes-start #f)
(define mehrunes-count 0)
(define mehrunes-plug #f)

(define blast-shot-int 0)
(define blast-shot-option #f)
(define blast-time-start-blue #f)
(define blast-time-start-yellow #f)
(define blast-time-start-red #f)
(define blast-time-start-dark #f)
(define blast-time-b 0)
(define blast-time-y 0)
(define blast-time-r 0)
(define blast-time-d 0)

(define guardv-5 #f)
(define guardv-5c 0)






;BLACKJAK INFO:
(define in-pre-game? #f)
(define in-blackjack? #f)
(define in-hiphog? #f)
(define on-table? #f)
(define table-activate #f)
(define no-state-camera-table #f)
(define bj-count 0)
(define bj-start #f)
(define hitting? #f)
(define hitting2? #f)
(define round-started? #f)
(define draw-jak-current #f)

(define draw-dealer-card1 #f)
(define draw-dealer-card2 #f)
(define draw-dealer-card3 #f)
(define draw-dealer-card4 #f)
(define draw-dealer-current #f)
(define-extern current-dealer string)
(define draw-current-dealer #f)

;KICKING OUT IN BJ

(define bj-kicked-out #f)
(define bj-kicked-cdr 0)
(define bj-kicked-max 5000)

;SETTINGS

(define bj-win #f)
(define bj-lose #f)
(define lose-count 0)
(define win-count 0)
(define dealer-stay #f)
(define dealer-bust #f)
(define dealer-cap 0)
(define char-on-table 1)
(define bid-amount 0.0)
(define bid-current 0.0)
(define bid-select 0)
(define bj-hit #f)
(define bj-stay #f)
(define bj-double-down #f)
(define added-cards-jak 0)
(define added-cards-dealer 0)
(define jak-current-card 0)
(define dealer-current-card 0)
(define jturn 0)
(define dturn 0)
(define dh-start #f)
(define d-count 0)
(define jackpot-win #f)

;COLORS
(define colorcard #f)

;BLACKJACK DRAWS
(define in-transition? #f)
(define popup-bj #f)
(define bj-dealer-s "Sig")
(define bj-bid-s "0")
(define bj-dealer-d #f)
(define bj-bid-d #f)
(define jackpotbaby #f)
(define jackpotbabytime 0)
(define-extern jackpotcolors string)
(define-extern jackpot-string string)

(define-extern jcard1s string)
(define-extern jcard2s string)
(define-extern jcard3s string)
(define-extern jcard4s string)
(define jcard1 #f)
(define jcard2 #f)
(define jcard3 #f)
(define jcard4 #f)
(define-extern dcard1s string)
(define-extern dcard2s string)
(define-extern dcard3s string)
(define-extern dcard4s string)
(define dcard1 #f)
(define dcard2 #f)
(define dcard3 #f)
(define dcard4 #f)

(define-extern jcard1i int)
(define-extern jcard2i int)
(define-extern jcard3i int)
(define-extern jcard4i int)

(define-extern dcard1i int)
(define-extern dcard2i int)
(define-extern dcard3i int)
(define-extern dcard4i int)



;BLACKJACK SOUNDS ON MOD BASE
;---------------------------------------------ASHELIN-------------------------------------------------
(define ashelin-win1 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/win/ash-win.mp3")
(define ashelin-win2 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/win/ash-win2.mp3")
(define ashelin-win3 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/win/ash-win3.mp3")
(define ashelin-win4 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/win/ash-win4.mp3")
(define ashelin-win5 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/win/ash-win5.mp3")
(define ashelin-win6 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/win/ash-win6.mp3")
(define ashelin-win7 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/win/ash-win7.mp3")

(define ashelin-lose1 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/lose/ash-lose.mp3")
(define ashelin-lose2 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/lose/ash-lose2.mp3")
(define ashelin-lose3 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/lose/ash-lose3.mp3")
(define ashelin-lose4 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/lose/ash-lose4.mp3")
(define ashelin-lose5 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/lose/ash-lose5.mp3")
(define ashelin-lose6 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/lose/ash-lose6.mp3")

(define ashelin-start1 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/startup/ash-start.mp3")

(define ashelin-again1 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/again/ash-again.mp3")

(define ashelin-kickout1 "goal_src/jak2/pc/csounds/BlackJakSounds/ashelin/kickout/ash-kickout.mp3")

;---------------------------------------------DAXTER-------------------------------------------------

(define daxter-win1 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/win/dax-win.mp3")
(define daxter-win2 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/win/dax-win2.mp3")
(define daxter-win3 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/win/dax-win3.mp3")
(define daxter-win4 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/win/dax-win4.mp3")
(define daxter-win5 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/win/dax-win5.mp3")
(define daxter-win6 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/win/dax-win6.mp3")
(define daxter-win7 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/win/dax-win7.mp3")
(define daxter-win8 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/win/dax-win8.mp3")

(define daxter-lose1 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/lose/dax-lose.mp3")
(define daxter-lose2 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/lose/dax-lose2.mp3")
(define daxter-lose3 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/lose/dax-lose3.mp3")
(define daxter-lose4 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/lose/dax-lose4.mp3")

(define daxter-start1 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/startup/dax-start.mp3")

(define daxter-again1 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/again")

(define daxter-kickout1 "goal_src/jak2/pc/csounds/BlackJakSounds/daxter/kickout/dax-kickout.mp3")

;---------------------------------------------ERROL-------------------------------------------------


(define errol-win1 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/win/errol-win.mp3")
(define errol-win2 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/win/errol-win2.mp3")
(define errol-win3 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/win/errol-win3.mp3")
(define errol-win4 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/win/errol-win4.mp3")
(define errol-win5 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/win/errol-win5.mp3")
(define errol-win6 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/win/errol-win6.mp3")
(define errol-win7 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/win/errol-win7.mp3")

(define errol-lose1 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/lose/errol-lose.mp3")
(define errol-lose2 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/lose/errol-lose2.mp3")
(define errol-lose3 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/lose/errol-lose3.mp3")
(define errol-lose4 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/lose/errol-lose4.mp3")
(define errol-lose5 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/lose/errol-lose5.mp3")

(define errol-start1 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/startup/errol-start.mp3")
(define errol-start2 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/startup/errol-start2.mp3")

(define errol-again1 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/again/errol-again.mp3")
(define errol-again2 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/again/errol-again2.mp3")

(define errol-kickout1 "goal_src/jak2/pc/csounds/BlackJakSounds/errol/kickout/errol-kickout.mp3")

;---------------------------------------------KREW-------------------------------------------------

(define krew-win1 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/win/krew-win.mp3")
(define krew-win2 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/win/krew-win2.mp3")
(define krew-win3 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/win/krew-win3.mp3")
(define krew-win4 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/win/krew-win4.mp3")
(define krew-win5 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/win/krew-win5.mp3")
(define krew-win6 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/win/krew-win6.mp3")

(define krew-lose1 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/lose/krew-lose.mp3")
(define krew-lose2 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/lose/krew-lose2.mp3")
(define krew-lose3 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/lose/krew-lose3.mp3")
(define krew-lose4 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/lose/krew-lose4.mp3")

(define krew-start1 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/startup/krew-start.mp3")
(define krew-start2 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/startup/krew-start2.mp3")

(define krew-again1 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/again/krew-again.mp3")
(define krew-again2 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/again/krew-again2.mp3")

(define krew-kickout1 "goal_src/jak2/pc/csounds/BlackJakSounds/krew/kickout/krew-kickout.mp3")

;---------------------------------------------PECKER-------------------------------------------------

(define pecker-win1 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/win/pecker-win.mp3")
(define pecker-win2 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/win/pecker-win2.mp3")
(define pecker-win3 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/win/pecker-win3.mp3")
(define pecker-win4 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/win/pecker-win4.mp3")
(define pecker-win5 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/win/pecker-win5.mp3")
(define pecker-win6 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/win/pecker-win6.mp3")
(define pecker-win7 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/win/pecker-win7.mp3")

(define pecker-lose1 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/lose/pecker-lose.mp3")
(define pecker-lose2 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/lose/pecker-lose2.mp3")
(define pecker-lose3 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/lose/pecker-lose3.mp3")

(define pecker-start1 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/startup/pecker-start.mp3")

(define pecker-again1 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/again/pecker-again.mp3")

(define pecker-kickout1 "goal_src/jak2/pc/csounds/BlackJakSounds/pecker/kickout/pecker-kickout.mp3")

;---------------------------------------------SAMOS-------------------------------------------------

(define samos-win1 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/win/jinx-win.mp3")
(define samos-win2 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/win/jinx-win2.mp3")
(define samos-win3 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/win/jinx-win3.mp3")
(define samos-win4 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/win/jinx-win4.mp3")
(define samos-win5 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/win/jinx-win5.mp3")
(define samos-win6 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/win/jinx-win6.mp3")
(define samos-win7 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/win/jinx-win7.mp3")
(define samos-win8 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/win/jinx-win8.mp3")

(define samos-lose1 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/lose/jinx-lose.mp3")
(define samos-lose2 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/lose/jinx-lose2.mp3")
(define samos-lose3 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/lose/jinx-lose3.mp3")
(define samos-lose4 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/lose/jinx-lose4.mp3")
(define samos-lose5 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/lose/jinx-lose5.mp3")
(define samos-lose6 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/lose/jinx-lose6.mp3")
(define samos-lose7 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/lose/jinx-lose7.mp3")
(define samos-lose8 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/lose/jinx-lose8.mp3")
(define samos-lose9 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/lose/jinx-lose9.mp3")

(define samos-start1 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/startup/jinx-startup.mp3")
(define samos-start2 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/startup/jinx-startup2.mp3")

(define samos-again1 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/again/jinx-again.mp3")
(define samos-again2 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/again/jinx-again2.mp3")

(define samos-kickout1 "goal_src/jak2/pc/csounds/BlackJakSounds/samos/kickout/jinx-kickout.mp3")

;---------------------------------------------SIG-------------------------------------------------

(define sig-win1 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/win/sig-win.mp3")
(define sig-win2 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/win/sig-win2.mp3")
(define sig-win3 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/win/sig-win3.mp3")
(define sig-win4 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/win/sig-win4.mp3")
(define sig-win5 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/win/sig-win5.mp3")

(define sig-lose1 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/lose/sig-lose.mp3")
(define sig-lose2 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/lose/sig-lose2.mp3")
(define sig-lose3 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/lose/sig-lose3.mp3")
(define sig-lose4 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/lose/sig-lose4.mp3")

(define sig-start1 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/startup/sig-start.mp3")
(define sig-start2 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/startup/sig-start2.mp3")

(define sig-again1 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/again/sig-again.mp3")
(define sig-again2 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/again/sig-again2.mp3")
(define sig-again3 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/again/sig-again3.mp3")

(define sig-kickout1 "goal_src/jak2/pc/csounds/BlackJakSounds/sig/kickout/sig-kickout.mp3")

;---------------------------------------------TORN-------------------------------------------------

(define torn-win1 "goal_src/jak2/pc/csounds/BlackJakSounds/torn/win/torn-win.mp3")

(define torn-lose1 "goal_src/jak2/pc/csounds/BlackJakSounds/torn/lose/torn-lose.mp3")
(define torn-lose2 "goal_src/jak2/pc/csounds/BlackJakSounds/torn/lose/torn-lose2.mp3")
(define torn-lose3 "goal_src/jak2/pc/csounds/BlackJakSounds/torn/lose/torn-lose3.mp3")
(define torn-lose4 "goal_src/jak2/pc/csounds/BlackJakSounds/torn/lose/torn-lose4.mp3")

(define torn-start1 "goal_src/jak2/pc/csounds/BlackJakSounds/torn/startup/torn-start.mp3")

(define torn-again1 "goal_src/jak2/pc/csounds/BlackJakSounds/torn/again")

(define torn-kickout1 "goal_src/jak2/pc/csounds/BlackJakSounds/torn/kickout/torn-kickout.mp3")

;---------------------------------------------TARGET-------------------------------------------------

(define bj-target-win1 "goal_src/jak2/pc/csounds/BlackJakSounds/target/win/jak-win.mp3")
(define bj-target-win2 "goal_src/jak2/pc/csounds/BlackJakSounds/target/win/jak-win2.mp3")
(define bj-target-win3 "goal_src/jak2/pc/csounds/BlackJakSounds/target/win/jak-win3.mp3")
(define bj-target-win4 "goal_src/jak2/pc/csounds/BlackJakSounds/target/win/jak-win4.mp3")
(define bj-target-win5 "goal_src/jak2/pc/csounds/BlackJakSounds/target/win/jak-win5.mp3")

(define bj-target-lose1 "goal_src/jak2/pc/csounds/BlackJakSounds/target/lose")

(define bj-target-again1 "goal_src/jak2/pc/csounds/BlackJakSounds/target/again")

(define bj-target-start1 "goal_src/jak2/pc/csounds/BlackJakSounds/target/start")

(define target-lose-against-dax1 "goal_src/jak2/pc/csounds/BlackJakSounds/target/lose-against-dax/jak-lose-againstdaxter.mp3")
(define target-lose-against-dax2 "goal_src/jak2/pc/csounds/BlackJakSounds/target/lose-against-dax/jak-lose-againstdaxter2.mp3")

(define target-win-against-dax1 "goal_src/jak2/pc/csounds/BlackJakSounds/target/win-against-dax")


;---------------------------------------------GAME-------------------------------------------------

(define sbid "goal_src/jak2/pc/csounds/BlackJakSounds/game/bid.mp3")
(define scard1 "goal_src/jak2/pc/csounds/BlackJakSounds/game/card1.mp3")
(define scard2 "goal_src/jak2/pc/csounds/BlackJakSounds/game/card2.mp3")
(define scard3 "goal_src/jak2/pc/csounds/BlackJakSounds/game/card3.mp3")
(define slose "goal_src/jak2/pc/csounds/BlackJakSounds/game/lose.mp3")
(define swin "goal_src/jak2/pc/csounds/BlackJakSounds/game/win.mp3")
(define sshuffle "goal_src/jak2/pc/csounds/BlackJakSounds/game/shuffle.mp3")
(define sstay "goal_src/jak2/pc/csounds/BlackJakSounds/game/stay.mp3")




;END




;-------------GUNMOD DEF----------------------
(define rapid-fire-option #f) ;option for if its enabled/gotten
(define rapid-fire-int 0) ;option for weapon 1-4
(define rapid-fire-blue #f)
(define rapid-fire-blue-count 0)
(define double-tap-option #f) ;option for if its enabled/gotten
(define double-tap-int 0);option for weapon 1-4
(define infinite-range-option #f) ;option for if its enabled/gotten
(define infinite-range-int 0);option for weapon 1-4
(define rapid-cycle-option #f) ;option for if its enabled/gotten
(define rapid-cycle-int 0);option for weapon 1-4
(define big-shot-option #f) ;option for if its enabled/gotten
(define big-shot-int 0);option for weapon 1-4
(define pm-extra-shot-option #f) ;option for if its enabled/gotten
(define pm-extra-shot-int 0);option for weapon 1-4
(define predator-shot-option #f) ;option for if its enabled/gotten
(define predator-shot-int 0);option for weapon 1-4
(define guard-shot-option #f) ;option for if its enabled/gotten
(define guard-shot-int 0);option for weapon 1-4


(define peacemaker-ability #f)


;BUYING SECRETS BACK IN HELL MODE
(define secrets-bought? #f)




(defenum pickup-type
  :bitfield #f
  :type int32
  (none            0)
  (eco-yellow      1)
  (eco-red         2)
  (eco-blue        3)
  (eco-dark        4)
  (eco-green       5)
  (eco-pill-green  6)
  (eco-pill-dark   7)
  (eco-pill-random 8)
  (money           9)
  (fuel-cell      10)
  (buzzer         11)
  (darkjak        12)
  (ammo-yellow    13)
  (ammo-red       14)
  (ammo-blue      15)
  (ammo-dark      16)
  (shield         17)
  (health         18)
  (trick-point    19)
  (trick-judge    20)
  (gem            21)
  (skill          22)
  (karma          23)
  (gun-red        24)
  (gun-yellow     25)
  (gun-blue       26)
  (gun-dark       27)
  (board          28)
  (pass-red       29)
  (pass-green     30)
  (pass-yellow    31)
  (pass-blue      32)
  (ammo-random    33)
  )

(defenum continue-flags
  :type uint32
  :bitfield #t
  ;(continue-flag-0 0)
  (scene-wait 1)
  (change-continue 2)
  (no-auto 3)
  (no-blackout 4)
  (game-start 5)
  (demo-end 6)
  (warp-gate 7)
  (demo 8)
  (intro 9)
  (hero-mode 10)
  (demo-movie 11)
  (title 12)
  (title-movie 13)
  (continue-flag-14 14)
  (continue-flag-15 15)
  (continue-flag-16 16)
  (test 17)
  (record-path 18)
  (pilot 19)
  (pilot-dax 20)
  (record-sig 21)
  (indax 22)
  )

;; +++game-secrets
(defenum game-secrets
  :type uint32
  :bitfield #t
  (toggle-beard)
  (hflip-screen)
  (endless-ammo)
  (invulnerable)
  (endless-dark)
  (scene-player-1)
  (scene-player-2)
  (scene-player-3)
  (level-select)
  (scrap-book-1)
  (scrap-book-2)
  (scrap-book-3)
  (gungame-blue)
  (gungame-dark)
  (reverse-races)
  (hero-mode)
  (big-head)
  (little-head)
  (game-secret-unknown))
;; ---game-secrets

(defenum game-score
  (none)
  (race-1)
  (race-2)
  (race-3)
  (gungame-red)
  (gungame-yellow)
  (gungame-blue)
  (gungame-dark)
  (onin-game)
  (whack)
  (judge-skatea)
  (bush-race-1)
  (bush-race-2)
  (bush-race-3)
  (bush-port)
  (bush-errol)
  (reverse-race-1)
  (reverse-race-2)
  (reverse-race-3)
  )

(defenum highscore-flags
  :bitfield #t
  :type uint8
  (time)
  )

(declare-type game-info basic)
(define-extern *game-info* game-info)
(declare-type process-drawable process)
(define-extern process-drawable-art-error (state string process-drawable))
(define-extern part-group-pointer? (function pointer symbol))

;; NOTE - for default-menu
(define-extern bug-report-display (function symbol int))
(define-extern trsq->continue-point (function trsq int))

;; NOTE - for progress
(declare-type highscore-info structure)
(define-extern *highscore-info-array* (array highscore-info))

(declare-type entity-perm structure)
(define-extern *task-level* (array symbol))

;; DECOMP BEGINS

(local-vars (gp-0 game-info))

(deftype game-bank (basic)
  ((life-max-default   float  :offset-assert   4)
   (life-start-default float  :offset-assert   8)
   (life-single-inc    float  :offset-assert  12)
   (money-task-inc     float  :offset-assert  16)
   (money-oracle-inc   float  :offset-assert  20)
   )
  :method-count-assert 9
  :size-assert         #x18
  :flag-assert         #x900000018
  )


(define *GAME-bank* (new 'static 'game-bank
                      :life-max-default 99.0
                      :life-start-default 5.0
                      :life-single-inc 1.0
                      :money-task-inc 90.0
                      :money-oracle-inc 120.0
                      )
        )

(deftype actor-id (uint32)
  ()
  :method-count-assert 9
  :size-assert         #x4
  :flag-assert         #x900000004
  )

(deftype highscore-info (structure)
  ((flags        highscore-flags   :offset-assert   0)
   (award-scores float           3 :offset-assert   4)
   (bronze-score float             :offset          4)
   (silver-score float             :offset          8)
   (gold-score   float             :offset         12)
   )
  :method-count-assert 10
  :size-assert         #x10
  :flag-assert         #xa00000010
  (:methods
    (get-rank (_type_ float) int 9)
    )
  )


(deftype level-buffer-state (structure)
  ((name          symbol  :offset-assert   0)
   (display?      symbol  :offset-assert   4)
   (force-vis?    symbol  :offset-assert   8)
   (force-inside? symbol  :offset-assert  12)
   )
  :pack-me
  :method-count-assert 9
  :size-assert         #x10
  :flag-assert         #x900000010
  )


(deftype load-state (basic)
  ((want          level-buffer-state LEVEL_MAX :inline :offset-assert   4)
   (want-sound    symbol             3         :offset-assert 100)
   (vis-nick      symbol                       :offset-assert 112)
   (command-list  pair                         :offset-assert 116)
   (object-name   string             256       :offset-assert 120)
   (object-status basic              256       :offset-assert 1144)
   )
  :method-count-assert 22
  :size-assert         #x878
  :flag-assert         #x1600000878
  (:methods
    (new (symbol type) _type_ 0)
    (reset! (_type_) _type_ 9)
    (update! (_type_) int 10)
    (want-levels (_type_ (pointer symbol)) int 11)
    (want-sound-banks (_type_ (pointer symbol)) none 12)
    (want-display-level (_type_ symbol symbol) int 13)
    (want-vis-level (_type_ symbol) none 14)
    (want-force-vis (_type_ symbol symbol) int 15)
    (want-force-inside (_type_ symbol symbol) none 16)
    (execute-commands-up-to (_type_ float) none 17)
    (backup-load-state-and-set-cmds (_type_ pair) int 18)
    (restore-load-state-and-cleanup (_type_) int 19)
    (restore-load-state (_type_) int 20)
    (add-borrow-levels (_type_) none 21)
    )
  )


(defmethod new load-state ((allocation symbol) (type-to-make type))
  (reset! (object-new allocation type-to-make (the-as int (-> type-to-make size))))
  )

(deftype continue-point (basic)
  ((name         string                       :offset-assert   4)
   (level        symbol                       :offset-assert   8)
   (flags        continue-flags               :offset-assert  12)
   (trans        vector             :inline   :offset-assert  16)
   (quat         vector             :inline   :offset-assert  32)
   (camera-trans vector             :inline   :offset-assert  48)
   (camera-rot   vector3s           3 :inline :offset-assert  64)
   (on-goto      pair                         :offset-assert 100)
   (vis-nick     symbol                       :offset-assert 104)
   (want         level-buffer-state 6 :inline :offset-assert 108)
   (want-sound   symbol             3         :offset-assert 204)
   )
  :method-count-assert 12
  :size-assert         #xd8
  :flag-assert         #xc000000d8
  (:methods
    (debug-draw (_type_) int 9)
    (continue-point-method-10 (_type_ load-state) continue-point 10)
    (move-camera! (_type_) none 11)
    )
  )


(deftype game-info (basic)
  ((mode                   symbol                         :offset-assert   4)
   (save-name              string                         :offset-assert   8)
   (life                   float                          :offset-assert  12)
   (life-max               float                          :offset-assert  16)
   (money                  float                          :offset-assert  20)
   (money-total            float                          :offset-assert  24)
   (money-per-level        uint8                       32 :offset-assert  28)
   (deaths-per-level       uint8                       32 :offset-assert  60)
   (buzzer-total           float                          :offset-assert  92)
   (fuel                   float                          :offset-assert  96)
   (gem                    float                          :offset-assert 100)
   (gem-total              float                          :offset-assert 104)
   (skill                  float                          :offset-assert 108)
   (skill-total            float                          :offset-assert 112)
   (karma                  float                          :offset-assert 116)
   (eco-pill-dark          float                          :offset-assert 120)
   (eco-pill-dark-total    float                          :offset-assert 124)
   (features               game-feature                   :offset-assert 128)
   (debug-features         game-feature                   :offset-assert 136)
   (secrets                game-secrets                   :offset-assert 144)
   (unknown-pad1           uint32                         :offset-assert 148)
   (purchase-secrets       game-secrets                   :offset-assert 152)
   (unknown-pad2           uint32                         :offset-assert 156)
   (gun-type               pickup-type                    :offset-assert 160)
   (gun-ammo               float                       4  :offset-assert 164)
   (shield                 float                          :offset-assert 180)
   (score                  float                          :offset-assert 184)
   (score-owner            handle                         :offset-assert 192)
   (timer                  time-frame                     :offset-assert 200)
   (timer-owner            handle                         :offset-assert 208)
   (timer-flash            symbol                         :offset-assert 216)
   (counter                float                          :offset-assert 220)
   (counter-flash          basic                          :offset-assert 224)
   (attack-id              uint32                         :offset-assert 228)
   (perm-list              entity-perm-array              :offset-assert 232)
   (task-perm-list         entity-perm-array              :offset-assert 236)
   (current-continue       continue-point                 :offset-assert 240)
   (last-continue          continue-point                 :offset-assert 244)
   (play-list              (array game-task-info)         :offset-assert 248)
   (sub-task-list          (array game-task-node-info)    :offset-assert 252)
   (mission-list           (array game-task-node-info)    :offset-assert 256)
   (task-counter           uint32                         :offset-assert 260)
   (unknown-pad6           (array uint16)                 :offset-assert 264)
   (level-opened           uint8                       32 :offset-assert 268)
   (total-deaths           int32                          :offset-assert 300)
   (continue-deaths        int32                          :offset-assert 304)
   (task-deaths            int32                          :offset-assert 308)
   (total-trys             int32                          :offset-assert 312)
   (game-start-time        time-frame                     :offset-assert 320)
   (continue-time          time-frame                     :offset-assert 328)
   (death-time             time-frame                     :offset-assert 336)
   (hit-time               time-frame                     :offset-assert 344)
   (task-pickup-time       time-frame                     :offset-assert 352)
   (unknown-array1         (array time-frame)             :offset-assert 360)
   (task-enter-times       (array time-frame)             :offset-assert 364)
   (task-in-times          (array time-frame)             :offset-assert 368)
   (death-pos              vector-array                   :offset        372)
   (stop-watch-start       uint64                         :offset-assert 376)
   (stop-watch-stop        uint64                         :offset-assert 384)
   (blackout-time          time-frame                     :offset-assert 392)
   (letterbox-time         time-frame                     :offset-assert 400)
   (hint-play-time         time-frame                     :offset-assert 408)
   (display-text-time      time-frame                     :offset-assert 416)
   (display-text-handle    handle                         :offset-assert 424)
   (death-movie-tick       int32                          :offset-assert 432)
   (want-auto-save         symbol                         :offset-assert 436)
   (auto-save-proc         handle                         :offset-assert 440)
   (auto-save-status       mc-status-code                 :offset-assert 448)
   (auto-save-card         int32                          :offset-assert 452)
   (auto-save-which        int32                          :offset-assert 456)
   (auto-save-count        int32                          :offset-assert 460)
   (pov-camera-handle      handle                         :offset-assert 464)
   (other-camera-handle    handle                         :offset-assert 472)
   (controller             handle                      2  :offset-assert 480)
   (race-timer             uint64                         :offset-assert 496)
   (race-current-lap-count int32                          :offset-assert 504)
   (race-total-lap-count   int32                          :offset-assert 508)
   (race-position          int32                          :offset-assert 512)
   (race-number-turbos     int32                          :offset-assert 516)
   (bot-health             float                       3  :offset-assert 520)
   (demo-state             uint32                         :offset-assert 532)
   (wanted-flash           symbol                         :offset-assert 536)
   (distance               float                          :offset-assert 540)
   (kiosk-timeout          uint64                         :offset-assert 544)
   (pause-start-time       time-frame                     :offset-assert 552)
   (game-score             (array float)                  :offset-assert 560)
   (goal                   float                          :offset-assert 564)
   (miss                   float                          :offset-assert 568)
   (miss-max               float                          :offset-assert 572)
   (task-close-times       (array time-frame)             :offset-assert 576)
   (live-eco-pill-count    int32                          :offset-assert 580)
   (live-gem-count         int32                          :offset-assert 584)
   (air-supply             float                          :offset-assert 588)
   (homing-beacon          int32                          :offset-assert 592)
   (dark-eco-pickup        int32                          :offset-assert 596)
   (green-eco-pickup       int32                          :offset-assert 600)
   )
  :method-count-assert 31
  :size-assert         #x25c
  :flag-assert         #x1f0000025c
  (:methods
    (initialize! (_type_ symbol game-save string) _type_ 9)
    (give (_type_ symbol float handle) float 10)
    (task-complete? (_type_ game-task) symbol 11)
    (subtask-index-by-name (_type_ string) int 12)
    (set-subtask-hook! (_type_ game-task-node int function) function 13)
    (actor-perm (_type_ actor-id) entity-perm 14)
    (task-perm-by-index (_type_ int) entity-perm 15)
    (copy-perms-from-level! (_type_ level) int 16)
    (copy-perms-to-level! (_type_ level) int 17)
    (debug-inspect (_type_ symbol) _type_ 18)
    (get-current-continue-forced (_type_) continue-point 19)
    (get-continue-by-name (_type_ string) continue-point 20)
    (set-continue! (_type_ basic symbol) continue-point 21)
    (game-info-method-22 (_type_) int 22)
    (save-game (_type_ game-save string) game-save 23)
    (load-game (_type_ game-save) game-save 24)
    (you-suck-stage (_type_ symbol) int 25)
    (you-suck-scale (_type_ object) float 26)
    (get-next-attack-id (_type_) uint 27)
    (game-info-method-28 (_type_ game-score float) int 28)
    (get-game-score-ref (_type_ int) (pointer float) 29)
    (calculate-percentage (_type_) float 30)
    )
  )


(defmethod get-next-attack-id game-info ((this game-info))
  (let ((v0-0 (+ (-> this attack-id) 1)))
    (set! (-> this attack-id) v0-0)
    v0-0
    )
  )

(set! gp-0
      (when (or (not *game-info*) (zero? *game-info*))
        (set! gp-0 (new 'static 'game-info :mode 'debug :current-continue #f :last-continue #f))
        (set! (-> gp-0 unknown-array1) (the-as (array time-frame) (new 'global 'boxed-array uint64 110)))
        (set! (-> gp-0 task-close-times) (the-as (array time-frame) (new 'global 'boxed-array uint64 110)))
        (set! (-> gp-0 task-enter-times) (the-as (array time-frame) (new 'global 'boxed-array uint64 32)))
        (set! (-> gp-0 task-in-times) (the-as (array time-frame) (new 'global 'boxed-array uint64 32)))
        (set! *game-info* gp-0)
        gp-0
        )
      )
