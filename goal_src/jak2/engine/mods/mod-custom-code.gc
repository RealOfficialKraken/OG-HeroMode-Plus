    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-code.gc
    ;; name in dgo: mod-code
    ;; dgos: TODO



    #| do (print help) in repl to see this
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
What are the commands to set your Green Eco or Gun Mod?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ALL WEAPON MODS ARE TOGGLED OFF BY DEFAULT, ONCE YOU SET IT ON AND SAVE, THERES NO GOING BACK ON YOUR SAVE.
(unless you set weapon-mod-toggle to false and (-> *game-info* fuel) to 0, then save)


you can set it via (set! weapon-mod-toggle #t) 
(this will choose a random modifier for you)

If you want to re-roll for another modifier you can do so with
(set! mod-reroll #t)
You must have 10 metalhead gems to reroll.


------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEAPON MODS: Each weapon mod will come with the option boolean, and an integer (which is referred in example as V) storing from 1-4 defining the selected gun. 1=Yellow, 2=Red, 3=Blue, 4=Dark
All of these changes are done in target-gun.gc
Example:
(set! rapid-fire-option #t)
(set! rapid-fire-int V)
------------------------------------------------------------------------------------------------------------------------------------------------------------------


rapid-fire-option                 Fire rate increased dramatically
rapid-fire-int

double-tap-option                 Every shot has a chance to fire a second without consuming ammo
double-tap-int

infinite-range-option             Every shot follows newtons law              (not working)
infinite-range-int                (meaning every shot has a max range of 999)

big-shot-option                   bigger bullets, bigger hitbox, right?       (not working)
big-shot-int

mag-bag-option                    x3 the ammo on the weapon its attached to (not implemented yet)
mag-bad-int

pm-extra-shot-option              Every shot has a chance to fire a peacemaker shot :) (this can also be pulled as a legendary)
pm-extra-shot-int

predator-shot-option              Every shot has a good chance to spawn a predator shot with it
predator-shot-int                 (this is deprecated, pred shot is in random-shot only, still works for the most part)

guard-shot-option                 Every shot has a good chance to spawn a guard shot with it
guard-shot-int

leg-random-shot                   Your gun can fire every shot known to man.
leg-random-int

Every guard that spawns will have a chance to drop a legendary weapon mod. All others are done via missions or burning-bush.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
GREEN ECO MODS(modifiers): Each mod works differently, but I keep all of it on a toggle boolean.
Example: (set! peacemaker-ability #t)
------------------------------------------------------------------------------------------------------------------------------------------------------------------

peacemaker-ability                at any given points in the game, jak has a chance to fire 100 peacemaker shots out of his gun
                                  but you must one-hit every boss fight in the game.

tp-fb                             upon death, theres a good chance jak will respawn at the final boss fight,
                                  BUT the final boss is extremely unfair, no saving is allowed, and no checkpoints are stored.

hover-damage                      Your hoverboard goes much faster, tricks virtually mean nothing for speed
                                  but mostly all enemies (except guards in traffic) have X5 HP. (oof)

dark-traffic                      Every dark eco you collect has a chance to fill your darkjak meter 100%
                                  but any time jak angers the guards, its max alert level

trip-metalheads                   jumping, punching, spinning, rolling, or shooting can make jak trip at a low chance
                                  but every time this happens, you get 10 free metal-head gems (cooldown 2000 frames)

target-explode                    jak has a bomb strapped to his chest and if he takes damage he has a chance of exploding
                                  but dark jak lasts a lot longer

hell-mode-option                  enabled automatically when in hero-mode. This enables all modifiers }:) good luck

------------------------------------------------------------------------------------------------------------------------------------------------------------------

















;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
YOU CAN READ THIS PART YOU WANT, YOU DONT HAVE TO :) These are ideas of mine to keep track of. Note that some are dated and this is more of a refernece for me..
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Upon loading for the first time in fortress, you will be given the option to choose one or to choose none.
then upon choosing, it saves a value attached to the option, a 1 or 0, to the save file directly
then an updating code block will check for a 1 or 0 and will actively set the corresponding mod a #t or #f
It is required to choose one to gain access to the weapon mods menu. (IE if all 0, then the setting for gun mods in the secrets menu does not appear)

(define traffic-nuke-option #f) ;;this is defined for if its over all chosen
(define traffic-nuke-save 0) ;;this is defined to set the gun for the option

jak does has a chance to cause 50 peacemaker shots to ring out in all directions.
But bosses must be one hit.

(define trip-metalheads-option #f)
(define trip-metalheads-save 0)
Any input has a very small chance for Jak to get hurt with 0 damage,
but every time that happens you gain 50 metal head gems

(define input-teleport-option #f)
(define input-teleport-save 0)
each time jak dies, it has a small chance to respawn jak to the final boss checkpoint.
but the final boss fight is extremely unfair.
the checkpoint is not stored or saved, nor is the save accessible during bossfight.
essentially you tp to boss, have a fun time in hell, die, then come back to your original checkpoint.

(define ambush-tricks-option #f)
(define ambush-tricks-save 0)
any input rolls between 1-600. If it's 1, ambush jak.
you get the damage buff at this very moment
ambush: 6 cloaked metalheads spawn in a radius around jak. (it can be a static position honestly, makes it more hilarious)

(define hell-mode-option #f)
(define hell-mode-save 0)
once a hero mode save is made, all options listed above are active at once in that save,
but you get legendary gun mods :) 





GUNMOD Shark (legendary)
Chance not to consume ammo

GUNMOD Mehrunes (legendary)
1/25 chance to instant kill

GUNMOD Random (legendary)
High chance to fire a random projectile alongside your gun

GUNMOD Explode (legendary)
All shots explode
------------------------------------------------------------------------------------------------------------------------------------------------------------------


CURRENT BUGS:
- GE PEACEMAKER_ABILITY: peacemaker weapon has to be available for peacemaker-ability to not crash the game upon trigger, so player starts with all weapons.
- GM PRED/GUARD SHOT: firing the guard or predator shot sets jak invulnerable for 3 frames until I can figure a way to not damage jak when firing
- GM PRED/GUARD SHOT: making jak invulnerable in this state turns off all the other game-secrets
- GM PREDATOR SHOT: firing the predator shot outside of ctywide and ctyport crashes the game
- GM BOARD PICKUP: the random gunmod trigger will happen upon drop, not upon pickup, but not for things like giving gems, that will be upon pickup >:[
  |#


#|;;;;;;;;;;;;;;;;;;;;;;;;;;
;      Var Definitions     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;|#

;Modifier Definitions (gun-mod definitions in target-gun.gc)
(define tp-fb-win #f)
(define mod-reroll #f) ;toggle on to reroll your current mod for 10 metalhead gems
(define mod-rand 0)
(define mod-pick #f)

(define auto-save-delayed? #f)
(define auto-save-frame 0)

(define hell-mode-option #f) ;toggle on to set hell-mode on (just turn on hero-mode)

(define weapon-mod-toggle #f) ;The option thats asked at the beginning, toggling this on will choose a random modifier for jak.
(define wm-drop #f) ;Turns on weapon mods dropping off the next spawned enemy that can drop mods.
(define wm-leg #f) ;sees if a legendary has dropped, if toggled on, the game will never drop a legendary
(define wm-roll-rand #f)
(define wm-roll-numb 0)
(define wm-rand-shot #f) ;toggle on to enable random shot, a legendary gun mod
(define wm-roll-shot 0)
(define inv-frames? #f)


(define test-option #f) ;test projectile
(define mod-all-yellow #f) ;sets all gunmods to yellow gun
(define mod-all-blue #f) ;sets all gunmods to blue gun
(define mod-all-red #f) ;sets all gunmods to red gun
(define mod-all-dark #f) ;sets all gunmods to peacemaker
(define mod-all-off #t)
(define mod-turning-off #f)

(define peacemaker-ability #f)  ; Chance to encumber in peacemaker shots, bosses are 1 hit
(define pm-shot-counter 0)
(define-extern gun-dark-present? symbol)
(define pm-offset-y (new 'static 'vector :x (meters 0) :y (meters 2) :z (meters 0) :w 1.0))

(define tp-fb #f) ; toggle on for a chance to teleport for final boss upon death
(define start-tp #f)
(define new-game-s? #f)
(define frame-count 0)
(define start-frame-count #f)
(define going-back-tp #f)
(define stored-cp? #f)
(define pause-menu-blocked? #f)
(define-extern tp-fb-win symbol)

(define hover-damage #f) ;toggle on to enable hoverboard mechanics, but enemies have X5 HP

(define dark-traffic #f) ;toggle on for a chance to get darkjak meter to full off any dark eco, but traffic-alert-4 is set for any illegal activity

(define trip-metalheads #f) ;toggle on for a chance to trip, but jak will get 10 metalhead gems every time (on cooldown 4000 frames)
(define trip-start #f)
(define trip-cooldown 0)

(define target-explode #f) ;toggle on for jak to explode upon taking damage, but dark-jak lasts much longer.
(define target-explode-start #f)
(define explode-frames 0)
(define explode-frame-start #f)
(define dark-jacked? #f)
(define dark-jacked! #f)

(define dt-frame-start #f)
(define dt-count 0)
(define dt-control #f)

(define leg-got? #f)
(define-extern leg-random-int int)
(define leg-random-shot #f)
(define leg-dont-fire? #f)

(define mod-default-gun 1)

(define all-modifiers-off? #f)
(define mission-grab-1 #f) ;sets mission get for weapon mods
(define mission-grab-2 #f) ;sets mission get for weapon mods
(define mission-grab-3 #f) ;sets mission get for weapon mods
(define mission-grab-4 #f) ;sets mission get for weapon mods

(define mushroom-movies #f)



(deftype predator-shot (metalhead-shot)
  ()
  :heap-base #x170
  :method-count-assert 40
  :size-assert         #x1f0
  :flag-assert         #x28017001f0
  )

(deftype turret-shot (guard-shot) ;i only declare this now because of the script load order.
  ((hit-pos vector :inline :offset-assert 496)
   )
  :heap-base #x180
  :method-count-assert 40
  :size-assert         #x200
  :flag-assert         #x2801800200
  )


;WEAPON MODS!
;This block below defines the obj for weapon mods dropping from enemies, taken from collectables.gc

#|
(defmethod deal-damage! guard-shot ((obj guard-shot) (arg0 process)
  (logior! (-> obj options) (projectile-options account-for-target-velocity deal-damage))
  (let ((t9-0 (method-of-type projectile deal-damage!)))
    (when (t9-0 obj arg0 arg1)
      (set! (-> obj hit-actor?) #f) 
      #t
      )
    )

))
|#

;sets the bounce-shot function, place in area where impact particles spawn
#|(when (and (made-impact? gun-yellow-shot) (= bounce-shot-int 1)(= bounce-shot #t))
    (let ((bounces-left bounces-left))
      (when (> bounces-left 0)
        (print "bounced")
        (-! bounces-left 1)
        (let ((s5-0 (-> *target* gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (set! (-> gp-0 ent) (-> *target* entity))
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
    (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
    (let* ((v1-9 *game-info*)
           (a0-9 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) a0-9)
      (set! (-> gp-0 attack-id) a0-9)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-float*! (-> gp-0 vel) (-> s5-0 fire-dir-out) 819200.0)
    (when (!= guard-shot-int 1)
      (spawn-projectile gun-yellow-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)           ;;;;;;;;;;;;;;;;;;;;
    )
        )
      )
      (when (<= bounces-left 0)
        (print "shot dead")
      )
    )
  )|#
  
(defmethod initialize-effects ammo-collectable ((obj ammo-collectable) (arg0 pickup-type))
  (set! (-> obj fact pickup-type) arg0)
  (case arg0
    (((pickup-type ammo-yellow))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-yellow" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 2.5 2.5 2.5 1.0)
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 108))
     )
    (((pickup-type ammo-red))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-red" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 4.0 4.0 4.0 1.0)
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 102))
     )
    (((pickup-type ammo-blue))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-blue" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 4.0 4.0 4.0 1.0)
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 98))
     )
    (((pickup-type ammo-dark))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-ammo-dark" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 3.0 3.0 3.0 1.0)
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 83))
     )
    (((pickup-type gun-yellow))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-gun-yellow-up" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 3.0 3.0 3.0 1.0)
     (logclear! (-> obj flags) (collectable-flag fadeout))
     (let ((v1-34 (-> obj node-list data)))
       (set! (-> v1-34 0 param0) (the-as (function cspace transformq none) cspace<-transformq+trans!))
       (set! (-> v1-34 0 param1) (the-as basic (-> obj root trans)))
       (set! (-> v1-34 0 param2) (the-as basic (-> obj extra-trans)))
       )
     (set-vector! (-> obj extra-trans) 0.0 1638.4 0.0 1.0)
     )
    (((pickup-type gun-dark))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-gun-dark-up" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (set-vector! (-> obj root scale) 3.0 3.0 3.0 1.0)
     (logclear! (-> obj flags) (collectable-flag fadeout))
     )
    (((pickup-type board))
     (process-entity-set! obj (the-as entity #f))
     (initialize-skeleton
       obj
       (the-as skeleton-group (art-group-get-by-name *level* "skel-board" (the-as (pointer uint32) #f)))
       (the-as pair 0)
       )
     (ja-channel-set! 1)
     (let ((v1-48 (-> obj skel root-channel 0)))
       (set! (-> v1-48 frame-group) (the-as art-joint-anim (-> obj draw art-group data 3)))
       )
     (set-vector! (-> obj root scale) 2.0 2.0 2.0 1.0)
     (let ((v1-52 (-> obj node-list data)))
       (set! (-> v1-52 0 param0) (the-as (function cspace transformq none) cspace<-transformq+trans!))
       (set! (-> v1-52 0 param1) (the-as basic (-> obj root trans)))
       (set! (-> v1-52 0 param2) (the-as basic (-> obj extra-trans)))
       )
     (set-vector! (-> obj extra-trans) 0.0 2048.0 0.0 1.0)
     (logclear! (-> obj flags) (collectable-flag fadeout))


     
;;;;;;;;;;;;;;;;;;;;;;LEGENDARY WEAPON MOD HANDOUT;;;;;;;;;;;;;;;;;;

(when (not (= (-> (level-get-target-inside *level*) name) 'skatea)) ;simple, if not in stadium, the hoverboard obj will not act like a weapon mod.
  (set! wm-roll-rand #t) ;this will execute every time a weapon mod is dropped. I have yet to figure out where to put this upon pickup
) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



     )
    (((pickup-type shield))
     (set! (-> obj ammo-effect) (-> *part-group-id-table* 80))
     )
    (((pickup-type trick-point))
     )
    )
  (none)
  )
 #|;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;    Code starts here. (YES! I know, it's really... REALLY bad!)    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;|#

    (defun runs-every-frame ()









;WEAPON MOD SPAWNS, REWARDS, AND SAVES
;Once a legendary is spawned it unlocks it for you. Later ill figure how to do it upon pickup, but for now I have no fucking clue. :L
;Right now all gun mods are set towards mod-default-gun, which is the yellow gun atm, until Mod-Base updates with the updated misc menu in "game-options" then you can select it yourself.


(when (= mod-reroll #t)
  (when (and (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))(>= (-> *game-info* gem) 10.0))
    (set! (-> *game-info* gem) (- (-> *game-info* gem) 10.0))
    (set! mod-pick #t)
    (print "[MOD] SUCCESSFULLY REROLLED :)
")
    (set! mod-reroll #f)
  )
  (when (< (-> *game-info* gem) 10.0)
    (print "[MOD] NOT ENOUGH GEMS, REQUIRE 10 TO REROLL
")
    (set! mod-reroll #f)
  )
  (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
    (print "[MOD] YOU'RE NOT ALLOWED TO RE-ROLL WHILE IN HELL-MODE }:]
")
    (set! mod-reroll #f)
  )
)


(when (and (= (-> *game-info* fuel) 0.0)(= (pause-allowed?) #t)(= weapon-mod-toggle #t)) ;checks for if you have weapon mod toggle on, then gives you a modifier
  (set! mod-pick #t)
)

(when (= mod-pick #t)
  (set! mod-rand (rand-vu-int-range 1 6))
  (when (= mod-rand 1)
    (set! (-> *game-info* fuel) 1.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Peacemaker Ability!
")
  )
  (when (and (!= (-> *game-info* buzzer-total) 2.0)(= mod-rand 2))
    (set! (-> *game-info* fuel) 2.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Teleport to Final Boss!
")
  )
  (when (= mod-rand 3)
    (set! (-> *game-info* fuel) 3.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Hoverboard/Enemy Health!
")
  )
  (when (= mod-rand 4)
    (set! (-> *game-info* fuel) 4.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Dark Eco / Threatening Traffic
")
  )
  (when (= mod-rand 5)
    (set! (-> *game-info* fuel) 5.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Trip Jak / Metalheads!
")
  )
  (when (= mod-rand 6)
    (set! (-> *game-info* fuel) 6.0)
    (set! mod-pick #f)
    (print "[MOD] rolled for Target Explode / DarkJakLonger!
")
  )
)



(when (and (!= (-> *game-info* fuel) 0.0)(= weapon-mod-toggle #f))
  (set! weapon-mod-toggle #t)
)

(when (= weapon-mod-toggle #t)
  ;Legendary Weapon Mod Saves
  (when (and (= (-> *game-info* buzzer-total) 0.0)(or (= leg-random-shot #t)(= pm-extra-shot-option #f))) ;if none
    (set! pm-extra-shot-option #f)
    (set! leg-random-shot #f)
    (set! leg-got? #f)
  )
  (when (and (= (-> *game-info* buzzer-total) 1.0)(= pm-extra-shot-option #f)) ;if 1, legendary extra chanced peacemaker-shot
    (set! pm-extra-shot-option #t)
    (set! pm-extra-shot-int mod-default-gun)
    (set! leg-got? #t)
  )

  (when (and (= (-> *game-info* buzzer-total) 2.0)(= leg-random-shot #f)) ;if 2, legendary random shot
    (set! leg-random-shot #t)
    (set! leg-random-int mod-default-gun)
    (set! leg-got? #t)
    (set! tp-fb-win #t)
  )



  ;Modifier Saves
  (when (and (= (-> *game-info* fuel) 0.0)(= all-modifiers-off? #f)) ;if none
    (set! hell-mode-option #f)
    (set! peacemaker-ability #f)
    (set! hover-damage #f)
    (set! dark-traffic #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #t)
    (set! weapon-mod-toggle #f)
    (set! trip-metalheads #f)
    (set! target-explode #f)
  )

  (when (and (= (-> *game-info* fuel) 1.0)(= peacemaker-ability #f)) ;if 1, peacemaker ability
    (set! hell-mode-option #f)
    (set! peacemaker-ability #t)
    (set! tp-fb #f)
    (set! hover-damage #f)
    (set! dark-traffic #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #f)
  )


  (when (and (= (-> *game-info* fuel) 2.0)(= tp-fb #f)) ;if 2, tp-fb
    (set! hell-mode-option #f)
    (set! tp-fb #t)
    (set! hover-damage #f)
    (set! dark-traffic #f)
    (set! peacemaker-ability #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #f)
  )
  (when (and (= (-> *game-info* fuel) 3.0)(= hover-damage #f)) ;if 3, hover-damage
    (set! hell-mode-option #f)
    (set! hover-damage #t)
    (set! dark-traffic #f)
    (set! peacemaker-ability #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #f)
  )
  (when (and (= (-> *game-info* fuel) 4.0)(= dark-traffic #f)) ;if 4, dark-traffic
    (set! hell-mode-option #f)
    (set! dark-traffic #t)
    (set! hover-damage #f)
    (set! peacemaker-ability #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #f)
  )
  (when (and (= (-> *game-info* fuel) 5.0)(= trip-metalheads #f)) ;if 5, trip-metalheads
    (set! hell-mode-option #f)
    (set! dark-traffic #f)
    (set! hover-damage #f)
    (set! peacemaker-ability #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #t)
    (set! target-explode #f)
  )
  (when (and (= (-> *game-info* fuel) 6.0)(= target-explode #f)) ;if 6, target-explode
    (set! hell-mode-option #f)
    (set! dark-traffic #f)
    (set! hover-damage #f)
    (set! peacemaker-ability #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! trip-metalheads #f)
    (set! target-explode #t)
  )
  (when (and (= (-> *game-info* fuel) 10.0)(= hell-mode-option #f)) ;if 10, hell mode }:)
    (set! hell-mode-option #t)
    (set! trip-metalheads #t)
    (set! dark-traffic #t)
    (set! hover-damage #t)
    (set! peacemaker-ability #t)
    (set! tp-fb #t)
    (set! all-modifiers-off? #f)
    (set! weapon-mod-toggle #t)
    (set! target-explode #t)
  )













  ;Mission-Based Weapon Mod Gets
  (when (and (task-node-closed? (game-task-node city-krew-delivery-resolution))(= mission-grab-1 #f)) ;after red gun, get rapid fire
    (set! mission-grab-1 #t)
    (set! rapid-fire-option #t)
    (set! rapid-fire-int mod-default-gun)
    (print "[GUN-MOD] Rapid Fire Acquired! Weapon Mod set to mod-default-gun
")
  )

  (when (and (task-node-closed? (game-task-node sewer-enemy-resolution))(= mission-grab-2 #f)) ;after yellow gun, get double tap
    (set! mission-grab-2 #t)
    (set! double-tap-option #t)
    (set! double-tap-int mod-default-gun)
    (print "[GUN-MOD] Chanced Double Tap Acquired! Weapon Mod set to mod-default-gun
")
  )

  (when (and (task-node-closed? (game-task-node ruins-enemy-introduction))(= mission-grab-3 #f)) ;after blue gun, get chanced guard shot
    (set! mission-grab-3 #t)
    (set! guard-shot-int mod-default-gun)
    (set! guard-shot-option #t)
    (print "[GUN-MOD] Chanced Guard Shot Acquired! Weapon Mod set to mod-default-gun
")
  )

  (when (and (task-node-closed? (game-task-node sewer-escort-get-gun))(= mission-grab-4 #f)) ;after dark gun, get chanced predator shot
    (set! mission-grab-4 #t)
    ;(set! predator-shot-int mod-default-gun)
    (set! predator-shot-option #t)
    (print "[GUN-MOD] Chanced Predator Shot Acquired! Weapon Mod set to mod-default-gun
")
  )
  ;looks for if their missions become un-completed after setting them, then takes away mission gun mods respectively
  (when (and (not (task-node-closed? (game-task-node city-krew-delivery-resolution)))(= mission-grab-1 #t))
    (set! mission-grab-1 #f)
    (set! rapid-fire-option #f)
  )

  (when (and (not (task-node-closed? (game-task-node sewer-enemy-resolution)))(= mission-grab-2 #t))
    (set! mission-grab-2 #f)
    (set! double-tap-option #f)
  )

  (when (and (not (task-node-closed? (game-task-node ruins-enemy-introduction)))(= mission-grab-3 #t))
    (set! mission-grab-3 #f)
    (set! guard-shot-option #f)
    (set! guard-shot-int 0)
  )

  (when (and (not (task-node-closed? (game-task-node sewer-escort-get-gun)))(= mission-grab-4 #t))
    (set! mission-grab-4 #f)
    (set! predator-shot-option #f)
    (set! predator-shot-int 0)
  )
)





;Roll for a random legenedary gun mod
(when (= wm-roll-rand #t) ;this runs the roll for a random weapon mod to be unlocked. Super inefficient, i love it :)

  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 1)) ;checks if rolled for integer 1
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (set! (-> *game-info* buzzer-total) 1.0)
    (print "[GUN-MOD] | LEGENDARY |  Chanced Peacemaker Shot Acquired! Weapon Mod set to mod-default-gun
")
  )
  (when (and (rand-vu-percent? 0.2)(= wm-roll-numb 2)) ;checks if rolled for integer 2
    (set! wm-roll-rand #f)
    (set! wm-roll-numb 0)
    (set! (-> *game-info* buzzer-total) 1.0)
    (print "[GUN-MOD] | LEGENDARY |  Chanced Peacemaker Shot Acquired! Weapon Mod set to mod-default-gun
")
  )
  (when (= wm-roll-rand #t) ;rolls the integer
    (+! wm-roll-numb 1)
    (when (> wm-roll-numb 2)
      (set! wm-roll-numb 0)
    )
  )

)



(when (and (logtest? (-> *game-info* secrets) (game-secrets hero-mode))(!= (-> *game-info* fuel) 10.0)) ;if you're in hero-mode, sets to have hell-mode enabled in your save.
    (set! (-> *game-info* fuel) 10.0)
)
(when (and (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))(= hell-mode-option #t)) ;if you're not in hero-mode, but you have set hell-mode on prior, set all to off.
    (set! hell-mode-option #f)
    (set! peacemaker-ability #f)
    (set! hover-damage #f)
    (set! dark-traffic #f)
    (set! tp-fb #f)
    (set! all-modifiers-off? #t)
    (set! weapon-mod-toggle #f)
    (set! trip-metalheads #f)
    (set! target-explode #f)
)



(when (= wm-rand-shot #t) ;this rolls through a random shot and shoots it out of jaks weapon. Activated in gun-(color)-shot.gc. Oh boy is this a list.
        (set! wm-roll-shot (rand-vu-int-range 1 6))
        (when (= wm-roll-shot 1)
          (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
      (set! (-> gp-0 ent) (-> *target* entity))
      (set! (-> gp-0 charge) (-> s5-0 fire-charge))
      (set! (-> gp-0 options) (projectile-options))
      (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
      (set! (-> gp-0 vel quad) (-> s5-0 fire-dir-out quad))
      (set! (-> gp-0 notify-handle) (the-as handle #f))
      (set! (-> gp-0 owner-handle) (the-as handle #f))
      (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
      (let* ((v1-8 *game-info*)
            (a0-11 (+ (-> v1-8 attack-id) 1))
            )
        (set! (-> v1-8 attack-id) a0-11)
        (set! (-> gp-0 attack-id) a0-11)
        )
      (set! (-> gp-0 timeout) (seconds 4))
      (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)))
        (when v0-1
          (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> *target* gun track-target 0 handle))
          (set! (-> *target* gun charge-active?) (ppointer->handle v0-1))
          )
        v0-1
      )
        )
        (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
        )

    
        (when (= wm-roll-shot 2)
        (let ((gp-0 (-> *target* gun))
        (s4-0 (-> *target* gun fire-dir-out))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (let ((s3-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-vector-angle! s3-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 360.0)))
      (vector-rotate-y! s5-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 1.1)))
      (vector-orient-by-quat! s5-0 s5-0 s3-0)
      )
    (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (set! (-> s4-1 ent) (-> *target* entity))
      (set! (-> s4-1 charge) 1.0)
      (set! (-> s4-1 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
      (set! (-> s4-1 pos quad) (-> gp-0 fire-point quad))
      (set! (-> s4-1 vel quad) (-> s5-0 quad))
      (set! (-> s4-1 notify-handle) (the-as handle #f))
      (set! (-> s4-1 owner-handle) (the-as handle #f))
      (set! (-> s4-1 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
      (let* ((v1-13 *game-info*)
             (a0-15 (+ (-> v1-13 attack-id) 1))
             )
        (set! (-> v1-13 attack-id) a0-15)
        (set! (-> s4-1 attack-id) a0-15)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (spawn-projectile gun-blue-shot s4-1 (ppointer->process (-> gp-0 gun)) *default-dead-pool*)
        (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
        )
        )
        )
        (when (= wm-roll-shot 3)
        (set! inv-frame-start #t)
        (when (or (= (-> (level-get-target-inside *level*) name) 'caspad)(= (-> (level-get-target-inside *level*) name) 'castle))
          (set! leg-dont-fire? #t)
          (set! wm-roll-shot (rand-vu-int-range 1 6))
        )
        (when (= leg-dont-fire? #f)
        (let ((s5-0 (-> *target* gun))
          (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
          )
          (set! (-> gp-0 ent) (-> *target* entity))
          (set! (-> gp-0 charge) (-> s5-0 fire-charge))
          (set! (-> gp-0 options) (projectile-options))
          (set! (-> gp-0 pos quad) (-> *target* gun fire-point quad))
          (set! (-> gp-0 vel quad) (-> *target* gun fire-dir-out quad))
          (set! (-> gp-0 notify-handle) (the-as handle #f))
          (set! (-> gp-0 owner-handle) (the-as handle #f))
          (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
          (set! (-> gp-0 timeout) (seconds 4))
          (set! inv-frame-start-g #t)
          (when (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))
            (set! (-> *game-info* secrets) (game-secrets invulnerable)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
          )
          (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
            (set! (-> *game-info* secrets) (game-secrets invulnerable hero-mode)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
          )
          (spawn-projectile metalhead-predator-shot gp-0 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
          (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
        )
        )
        )
        (when (= wm-roll-shot 4)
          (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
            (set! (-> s4-1 ent) (-> *target* entity))
            (set! (-> s4-1 charge) 1.0)
            (set! (-> s4-1 options) (projectile-options account-for-target-velocity proj-options-8000))
            (set! (-> s4-1 pos quad) (-> *target* gun fire-point quad))
            (set! (-> s4-1 vel quad) (-> *target* gun fire-dir-out quad))
            (set! (-> s4-1 notify-handle) (the-as handle #f))
            (set! (-> s4-1 owner-handle) (the-as handle #f))
            (set! (-> s4-1 ignore-handle) (the-as handle #f))
            (let* ((a0-13 *game-info*)
            (a1-12 (+ (-> a0-13 attack-id) 1))
            )
        (set! (-> a0-13 attack-id) a1-12)
        (set! (-> s4-1 attack-id) a1-12)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (vector-normalize! (-> s4-1 vel) 819200.0)
      (set! inv-frame-start-g #t)
      (when (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))
    (set! (-> *game-info* secrets) (game-secrets invulnerable)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
  (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
    (set! (-> *game-info* secrets) (game-secrets invulnerable hero-mode)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
      (spawn-projectile guard-shot s4-1 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
      (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
      )
        )
        (when (= wm-roll-shot 5)
          (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (-> *target* gun)))
      (let ((s5-0 (-> *part-id-table* 190)))
        (get-field-spec-by-id s5-0 (sp-field-id spt-omega))
        (let ((s5-1 (get-field-spec-by-id s5-0 (sp-field-id spt-rotate-y))))
          (if s5-1
              (set! (-> s5-1 initial-valuef) (y-angle (-> *target* control)))
              )
          )
        )
      (let ((t9-3 sp-launch-particles-var)
            (a0-3 *sp-particle-system-2d*)
            (a1-2 (-> *part-id-table* 190))
            (a2-0 *launch-matrix*)
            )
        (set! (-> a2-0 trans quad) (-> gp-0 fire-point quad))
        (t9-3 a0-3 a1-2 a2-0 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      (let ((s5-2 (new 'stack-no-clear 'vector)))
        (let ((v1-10 (-> gp-0 fire-point)))
          (let ((a0-4 (-> gp-0 fire-dir-out)))
            (let ((a1-4 24576.0))
              (.mov vf7 a1-4)
              )
            (.lvf vf5 (&-> a0-4 quad))
            )
          (.lvf vf4 (&-> v1-10 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s5-2 quad) vf6)
        (set! (-> s5-2 w) 24576.0)
        (when (and (sphere-in-view-frustum? (the-as sphere s5-2))
                   (< 24576.0 (vector-vector-distance s5-2 (math-camera-pos)))
                   )
          (let ((s5-3 (process-spawn
                        manipy
                        :init manipy-init
                        (-> gp-0 fire-point)
                        (-> *target* entity)
                        (art-group-get-by-name *level* "skel-gun-red-cone" (the-as (pointer uint32) #f))
                        #f
                        0
                        :to *target*
                        )
                      )
                )
            (when s5-3
              (send-event (ppointer->process s5-3) 'anim-mode 'play1)
              (send-event (ppointer->process s5-3) 'anim "idle")
              (forward-up->quaternion
                (-> (the-as process-drawable (-> s5-3 0)) root quat)
                (-> gp-0 fire-dir-out)
                *up-vector*
                )
              (let ((f30-1 (vector-dot
                             (-> gp-0 fire-dir-out)
                             (vector-! (new 'stack-no-clear 'vector) (-> gp-0 fire-point) (math-camera-pos))
                             )
                           )
                    (f0-5 (vector-vector-xz-distance (-> gp-0 fire-point) (math-camera-pos)))
                    )
                (when (and (< f30-1 0.0) (< f0-5 32768.0))
                  (set! (-> (the-as process-drawable (-> s5-3 0)) root scale z)
                        (lerp-scale 0.2 1.0 (fabs f0-5) 20480.0 32768.0)
                        )
                  (set! (-> (the-as process-drawable (-> s5-3 0)) root scale x)
                        (-> (the-as process-drawable (-> s5-3 0)) root scale z)
                        )
                  )
                )
              )
            )
          )
        )
      (process-spawn gun-red-shot (-> gp-0 fire-point) (-> gp-0 fire-dir-out) :to (ppointer->process (-> gp-0 gun)))
      (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
        )
        )
        )
        (when (= wm-roll-shot 6)
        (let ((s5-0 (-> *target* gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (set! (-> gp-0 ent) (-> *target* entity))
    (set! (-> gp-0 charge) 1.0)
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
    (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
    (let* ((v1-9 *game-info*)
           (a0-9 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) a0-9)
      (set! (-> gp-0 attack-id) a0-9)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-float*! (-> gp-0 vel) (-> s5-0 fire-dir-out) 819200.0)
    (spawn-projectile gun-yellow-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)
    (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
        )
      )
)



;DOUBLE TAP
;This is called from setting dt-frame-start to true, firing another projectile based on what weapon jak has it on, and whether or not guard-shot is taking its place.
;---------------------------------------------------------------------------------------------

(when (= dt-frame-start #t)
  (+! dt-count 1)
)

(when (> dt-count 5)
    ;-------------------------------------------YELLOW SHOT-----------------------------------------------------------
    (when (and (!= guard-shot-int 1)(= double-tap-int 1))
      (let ((s5-0 (-> *target* gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
    (set! (-> gp-0 ent) (-> *target* entity))
    (set! (-> gp-0 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
    (set! (-> gp-0 pos quad) (-> s5-0 fire-point quad))
    (set! (-> gp-0 notify-handle) (the-as handle #f))
    (set! (-> gp-0 owner-handle) (the-as handle #f))
    (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
    (let* ((v1-9 *game-info*)
           (a0-9 (+ (-> v1-9 attack-id) 1))
           )
      (set! (-> v1-9 attack-id) a0-9)
      (set! (-> gp-0 attack-id) a0-9)
      )
    (set! (-> gp-0 timeout) (seconds 4))
    (vector-float*! (-> gp-0 vel) (-> s5-0 fire-dir-out) 819200.0)
          (spawn-projectile gun-yellow-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)
        )
    )
    (when (and (= double-tap-int 1)(= guard-shot-int 1))
          (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
            (set! (-> s4-1 ent) (-> *target* entity))
            (set! (-> s4-1 charge) 1.0)
            (set! (-> s4-1 options) (projectile-options account-for-target-velocity proj-options-8000))
            (set! (-> s4-1 pos quad) (-> *target* gun fire-point quad))
            (set! (-> s4-1 vel quad) (-> *target* gun fire-dir-out quad))
            (set! (-> s4-1 notify-handle) (the-as handle #f))
            (set! (-> s4-1 owner-handle) (the-as handle #f))
            (set! (-> s4-1 ignore-handle) (the-as handle #f))
            (let* ((a0-13 *game-info*)
            (a1-12 (+ (-> a0-13 attack-id) 1))
            )
        (set! (-> a0-13 attack-id) a1-12)
        (set! (-> s4-1 attack-id) a1-12)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (vector-normalize! (-> s4-1 vel) 819200.0)
      (set! (-> *game-info* secrets) (game-secrets invulnerable))
      (spawn-projectile guard-shot s4-1 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
      (set! inv-frame-start-g #t)
      (when (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))
    (set! (-> *game-info* secrets) (game-secrets invulnerable)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
  (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
    (set! (-> *game-info* secrets) (game-secrets invulnerable hero-mode)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
      )
        )
        ;---------------------------------------------RED SHOT---------------------------------------------------
    (when (and (!= guard-shot-int 2)(= double-tap-int 2))
      (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf4 :class vf)
         (vf5 :class vf)
         (vf6 :class vf)
         (vf7 :class vf)
         )
    (init-vf0-vector)
    (let ((gp-0 (-> *target* gun)))
      (let ((s5-0 (-> *part-id-table* 190)))
        (get-field-spec-by-id s5-0 (sp-field-id spt-omega))
        (let ((s5-1 (get-field-spec-by-id s5-0 (sp-field-id spt-rotate-y))))
          (if s5-1
              (set! (-> s5-1 initial-valuef) (y-angle (-> *target* control)))
              )
          )
        )
      (let ((t9-3 sp-launch-particles-var)
            (a0-3 *sp-particle-system-2d*)
            (a1-2 (-> *part-id-table* 190))
            (a2-0 *launch-matrix*)
            )
        (set! (-> a2-0 trans quad) (-> gp-0 fire-point quad))
        (t9-3 a0-3 a1-2 a2-0 (the-as sparticle-launch-state #f) (the-as sparticle-launch-control #f) 1.0)
        )
      (let ((s5-2 (new 'stack-no-clear 'vector)))
        (let ((v1-10 (-> gp-0 fire-point)))
          (let ((a0-4 (-> gp-0 fire-dir-out)))
            (let ((a1-4 24576.0))
              (.mov vf7 a1-4)
              )
            (.lvf vf5 (&-> a0-4 quad))
            )
          (.lvf vf4 (&-> v1-10 quad))
          )
        (.add.x.vf vf6 vf0 vf0 :mask #b1000)
        (.mul.x.vf acc vf5 vf7 :mask #b111)
        (.add.mul.w.vf vf6 vf4 vf0 acc :mask #b111)
        (.svf (&-> s5-2 quad) vf6)
        (set! (-> s5-2 w) 24576.0)
        (when (and (sphere-in-view-frustum? (the-as sphere s5-2))
                   (< 24576.0 (vector-vector-distance s5-2 (math-camera-pos)))
                   )
          (let ((s5-3 (process-spawn
                        manipy
                        :init manipy-init
                        (-> gp-0 fire-point)
                        (-> *target* entity)
                        (art-group-get-by-name *level* "skel-gun-red-cone" (the-as (pointer uint32) #f))
                        #f
                        0
                        :to *target*
                        )
                      )
                )
            (when s5-3
              (send-event (ppointer->process s5-3) 'anim-mode 'play1)
              (send-event (ppointer->process s5-3) 'anim "idle")
              (forward-up->quaternion
                (-> (the-as process-drawable (-> s5-3 0)) root quat)
                (-> gp-0 fire-dir-out)
                *up-vector*
                )
              (let ((f30-1 (vector-dot
                             (-> gp-0 fire-dir-out)
                             (vector-! (new 'stack-no-clear 'vector) (-> gp-0 fire-point) (math-camera-pos))
                             )
                           )
                    (f0-5 (vector-vector-xz-distance (-> gp-0 fire-point) (math-camera-pos)))
                    )
                (when (and (< f30-1 0.0) (< f0-5 32768.0))
                  (set! (-> (the-as process-drawable (-> s5-3 0)) root scale z)
                        (lerp-scale 0.2 1.0 (fabs f0-5) 20480.0 32768.0)
                        )
                  (set! (-> (the-as process-drawable (-> s5-3 0)) root scale x)
                        (-> (the-as process-drawable (-> s5-3 0)) root scale z)
                        )
                  )
                )
              )
            )
          )
        )
      (process-spawn gun-red-shot (-> gp-0 fire-point) (-> gp-0 fire-dir-out) :to (ppointer->process (-> gp-0 gun)))
      (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
        )
        )
    )
    (when (and (= double-tap-int 2)(= guard-shot-int 2))
          (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
            (set! (-> s4-1 ent) (-> *target* entity))
            (set! (-> s4-1 charge) 1.0)
            (set! (-> s4-1 options) (projectile-options account-for-target-velocity proj-options-8000))
            (set! (-> s4-1 pos quad) (-> *target* gun fire-point quad))
            (set! (-> s4-1 vel quad) (-> *target* gun fire-dir-out quad))
            (set! (-> s4-1 notify-handle) (the-as handle #f))
            (set! (-> s4-1 owner-handle) (the-as handle #f))
            (set! (-> s4-1 ignore-handle) (the-as handle #f))
            (let* ((a0-13 *game-info*)
            (a1-12 (+ (-> a0-13 attack-id) 1))
            )
        (set! (-> a0-13 attack-id) a1-12)
        (set! (-> s4-1 attack-id) a1-12)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (vector-normalize! (-> s4-1 vel) 819200.0)
      (set! inv-frame-start-g #t)
      (when (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))
    (set! (-> *game-info* secrets) (game-secrets invulnerable)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
  (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
    (set! (-> *game-info* secrets) (game-secrets invulnerable hero-mode)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
      (spawn-projectile guard-shot s4-1 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
      )

  )
  ;--------------------------------------------BLUE SHOT--------------------------------------------------
  (when (and (!= double-tap-int 3)(= guard-shot-int 3))
    (let ((gp-0 (-> *target* gun))
        (s4-0 (-> *target* gun fire-dir-out))
        (s5-0 (new 'stack-no-clear 'vector))
        )
    (let ((s3-0 (new 'stack-no-clear 'quaternion)))
      (quaternion-vector-angle! s3-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 360.0)))
      (vector-rotate-y! s5-0 s4-0 (* 182.04445 (rand-vu-float-range 0.0 1.1)))
      (vector-orient-by-quat! s5-0 s5-0 s3-0)
      )
    (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
      (set! (-> s4-1 ent) (-> *target* entity))
      (set! (-> s4-1 charge) 1.0)
      (set! (-> s4-1 options) (projectile-options account-for-target-velocity deal-damage proj-options-8000))
      (set! (-> s4-1 pos quad) (-> gp-0 fire-point quad))
      (set! (-> s4-1 vel quad) (-> s5-0 quad))
      (set! (-> s4-1 notify-handle) (the-as handle #f))
      (set! (-> s4-1 owner-handle) (the-as handle #f))
      (set! (-> s4-1 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
      (let* ((v1-13 *game-info*)
             (a0-15 (+ (-> v1-13 attack-id) 1))
             )
        (set! (-> v1-13 attack-id) a0-15)
        (set! (-> s4-1 attack-id) a0-15)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (spawn-projectile gun-blue-shot s4-1 (ppointer->process (-> gp-0 gun)) *default-dead-pool*)
        (set! wm-roll-shot 0)
        (set! wm-rand-shot #f)
        )
        )
  )
  (when (and (= double-tap-int 3) (= guard-shot-int 3))
    (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
            (set! (-> s4-1 ent) (-> *target* entity))
            (set! (-> s4-1 charge) 1.0)
            (set! (-> s4-1 options) (projectile-options account-for-target-velocity proj-options-8000))
            (set! (-> s4-1 pos quad) (-> *target* gun fire-point quad))
            (set! (-> s4-1 vel quad) (-> *target* gun fire-dir-out quad))
            (set! (-> s4-1 notify-handle) (the-as handle #f))
            (set! (-> s4-1 owner-handle) (the-as handle #f))
            (set! (-> s4-1 ignore-handle) (the-as handle #f))
            (let* ((a0-13 *game-info*)
            (a1-12 (+ (-> a0-13 attack-id) 1))
            )
        (set! (-> a0-13 attack-id) a1-12)
        (set! (-> s4-1 attack-id) a1-12)
        )
      (set! (-> s4-1 timeout) (seconds 4))
      (vector-normalize! (-> s4-1 vel) 819200.0)
      (set! inv-frame-start-g #t)
      (when (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))
    (set! (-> *game-info* secrets) (game-secrets invulnerable)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
  (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
    (set! (-> *game-info* secrets) (game-secrets invulnerable hero-mode)) ;this also makes it so that theres no game secrets allowed when using predator/guard shot. I could be lazy and make it for all of them
  )
      (spawn-projectile guard-shot s4-1 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
      )
  )
  
  (set! dt-count 0)
  (set! dt-frame-start #f)
)





 ;This counts invulnerable frames for when jak fires a projectile that could damage him. This is for predator shot.
(when (= inv-frame-start #t)
  (+! inv-frame-counter 1)
  (when (> inv-frame-counter 2)
    (set! (-> *game-info* secrets) (game-secrets ))
    (set! inv-frame-counter 0)
    (set! inv-frame-start #f)
  )
)
;same thing as above, but for guard shot
(when (= inv-frame-start-g #t)
  (+! inv-frame-counter-g 1)
  (when (> inv-frame-counter-g 2)
    (when (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))
      (set! (-> *game-info* secrets) (game-secrets ))
      (when (and (not (logtest? (-> *game-info* secrets) (game-secrets hero-mode)))(= (-> *game-info* fuel) 10.0))
      (set! (-> *game-info* secrets) (game-secrets hero-mode))
    )
    )
    (when (logtest? (-> *game-info* secrets) (game-secrets hero-mode))
      (set! (-> *game-info* secrets) (game-secrets hero-mode))
    )
    (set! inv-frame-counter-g 0)
    (set! inv-frame-start-g #f)
  )
)



    (when (= mod-all-yellow #t) ;these chunks will set all gun mods to one weapon. Be careful lol         EXAMPLE:         (set! mod-all-yellow #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 1)
      (set! double-tap-option #t)
      (set! double-tap-int 1)
      (set! infinite-range-option #t)
      (set! infinite-range-int 1)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 1)
      (set! predator-shot-option #t)
      (set! predator-shot-int 1)
      (set! guard-shot-option #t)
      (set! guard-shot-int 1)
      (set! mod-all-off #f)
      (set! mod-all-blue #f)
      (set! mod-all-red #f)
      (set! mod-all-dark #f)
      (set! mod-all-yellow #f)
      (set! mod-turning-off #t)
    )
    (when (= mod-all-blue #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 3)
      (set! double-tap-option #t)
      (set! double-tap-int 3)
      (set! infinite-range-option #t)
      (set! infinite-range-int 3)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 3)
      (set! predator-shot-option #t)
      (set! predator-shot-int 3)
      (set! guard-shot-option #t)
      (set! guard-shot-int 3)
      (set! mod-all-off #f)
      (set! mod-all-yellow #f)
      (set! mod-all-red #f)
      (set! mod-all-dark #f)
      (set! mod-all-blue #f)
      (set! mod-turning-off #t)
    )
    (when (= mod-all-red #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 2)
      (set! double-tap-option #t)
      (set! double-tap-int 2)
      (set! infinite-range-option #t)
      (set! infinite-range-int 2)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 2)
      (set! predator-shot-option #t)
      (set! predator-shot-int 2)
      (set! guard-shot-option #t)
      (set! guard-shot-int 2)
      (set! mod-all-off #f)
      (set! mod-all-blue #f)
      (set! mod-all-yellow #f)
      (set! mod-all-dark #f)
      (set! mod-all-red #f)
      (set! mod-turning-off #t)
    )
    (when (= mod-all-dark #t)
      (set! rapid-fire-option #t)
      (set! rapid-fire-int 4)
      (set! double-tap-option #t)
      (set! double-tap-int 4)
      (set! infinite-range-option #t)
      (set! infinite-range-int 4)
      (set! pm-extra-shot-option #t)
      (set! pm-extra-shot-int 4)
      (set! predator-shot-option #t)
      (set! predator-shot-int 4)
      (set! guard-shot-option #t)
      (set! guard-shot-int 4)
      (set! mod-all-off #f)
      (set! mod-all-blue #f)
      (set! mod-all-red #f)
      (set! mod-all-yellow #f)
      (set! mod-all-dark #f)
      (set! mod-turning-off #t)
    )
    (when (and (= mod-all-off #t) (= mod-turning-off #t))
      (set! rapid-fire-option #f)
      (set! rapid-fire-int 0)
      (set! double-tap-option #f)
      (set! double-tap-int 0)
      (set! infinite-range-option #f)
      (set! infinite-range-int 0)
      (set! pm-extra-shot-option #f)
      (set! pm-extra-shot-int 0)
      (set! predator-shot-option #f)
      (set! predator-shot-int 0)
      (set! guard-shot-option #t)
      (set! guard-shot-int 0)
      (set! mod-all-blue #f)
      (set! mod-all-red #f)
      (set! mod-all-dark #f)
      (set! mod-all-yellow #f)
      (set! mod-turning-off #f)
    )


    

      (when (and (= test-option #t) (rand-vu-percent? 0.05)) ;debug projectile, you can enable to do absolutely nothing but have a chance to shoot a projectile every frame or so
        (let ((s4-1 (new 'stack-no-clear 'projectile-init-by-other-params)))
    (set! (-> s4-1 ent) (-> *target* entity))
    (set! (-> s4-1 charge) 1.0)
    (set! (-> s4-1 options) (projectile-options account-for-target-velocity proj-options-8000))
    (set! (-> s4-1 pos quad) (-> *target* gun fire-point quad))
    (set! (-> s4-1 vel quad) (-> *target* gun fire-dir-out quad))
    (set! (-> s4-1 notify-handle) (the-as handle #f))
    (set! (-> s4-1 owner-handle) (the-as handle #f))
    (set! (-> s4-1 ignore-handle) (the-as handle #f))
    (let* ((a0-13 *game-info*)
           (a1-12 (+ (-> a0-13 attack-id) 1))
           )
      (set! (-> a0-13 attack-id) a1-12)
      (set! (-> s4-1 attack-id) a1-12)
      )
    (set! (-> s4-1 timeout) (seconds 4))
    (vector-normalize! (-> s4-1 vel) 819200.0)
    (spawn-projectile guard-shot s4-1 (ppointer->process (-> *target* gun gun)) *default-dead-pool*)
    )
      )





;                    Peacemaker Ability
;---------------------------------------------------------
;(vector-rotate-y! svec-pos svec-pos 3.0) ;possible line for enlarging the radius of gun-point, possible fix for invulnerability turning off game secrets.
      
  (when (and (and (= peacemaker-ability #t)(rand-vu-percent? 0.000006)(> (-> *target* fact health) 0.0)))
    (set! pm-shot-trigger #t)
  )

  (if (and (and (= peacemaker-ability #t)(rand-vu-percent? 0.25)(= pm-shot-trigger #t))) ;
    (let ((svec-pos (new-stack-vector0))
    (tpoz (-> *target* gun fire-point)))
    (vector-rotate-y! svec-pos svec-pos 90.0)
      (let ((s5-0 (-> *target* gun))
        (gp-0 (new 'stack-no-clear 'projectile-init-by-other-params))
        )
        (vector-copy! (-> gp-0 pos) (vector+! svec-pos tpoz pm-offset-y))
        (set! (-> gp-0 ent) (-> *target* entity))
        (set! (-> gp-0 charge) (-> s5-0 fire-charge))
        (set! (-> gp-0 options) (projectile-options))
        (set! (-> gp-0 pos quad) (-> svec-pos quad))
        (set! (-> gp-0 vel quad) (-> svec-pos quad))
        (set! (-> gp-0 notify-handle) (the-as handle #f))
        (set! (-> gp-0 owner-handle) (the-as handle #f))
        (set! (-> gp-0 ignore-handle) (process->handle (the-as process (send-event *target* 'get-vehicle))))
        (set! (-> gp-0 timeout) (seconds 4))
        (let ((v0-1 (spawn-projectile gun-dark-shot gp-0 (ppointer->process (-> s5-0 gun)) *default-dead-pool*)))
          (when v0-1
            (set! (-> (the-as gun-dark-shot (-> v0-1 0)) track-target) (-> *target* gun track-target 0 handle))
            (+! pm-shot-counter 1)
            (when (= pm-shot-counter 30)
              (set! pm-shot-trigger #f)
              (set! pm-shot-counter 0)
              (if (= gun-dark-present? #t)
                (set! (-> *game-info* features) (game-feature gun board sidekick gun-dark gun-yellow gun-red gun-blue))
                    )
                  
                )
              )
              v0-1
            )
          )
        )
    )
      
;                    Teleport to final boss
;---------------------------------------------------------
      ;INFO
#|tp-fb is the whole TeleportJakToFinalBoss Mod.
All of the variables set are for time-based events based off of frames |#


  (when (= start-frame-count #t)
    (+! frame-count 1)
  )
  (when (and (and (and (= stored-cp? #f)(= tp-fb #t)(rand-vu-percent? 0.0007)(< (-> *target* fact health) 1)))) ;looks for teleport percentage upon death, if so, init new game.
    (auto-save-user)
    (set! start-frame-count #t)
    (set! stored-cp? #t)
    (set! new-game-s? #t)
  )
  (when (and (and (= frame-count 20)(= new-game-s? #t)(= stored-cp? #t)))
    
    (set! mission-grab-1 #t)
    (set! mission-grab-2 #t)
    (set! mission-grab-3 #t)
    (set! mission-grab-4 #t)
    (set! weapon-mod-toggle #f)
    (set! rapid-fire-option #f)
    (set! double-tap-option #f)
    (set! guard-shot-option #f)
    (set! predator-shot-option #f)
    (initialize! *game-info* 'game (the-as game-save #f) (the-as string #f))
    (print "[MOD] started teleporting
")
  )
  (when (and (and (= frame-count 30)(= new-game-s? #t)(= stored-cp? #t))) ;starts after a little bit to avoid crashes, teleports jak to final boss spawnpoint and sets the game task
    (start 'play (get-continue-by-name *game-info* "nestb-boss-pit"))
    (play-task (game-task nest-boss) 'debug #f)
    ;(set! pause-menu-blocked? #t)
    (when (= hell-mode-option #t)
      (set! (-> *game-info* fuel) 10.0)
    )
    (when (= hell-mode-option #f)
      (set! (-> *game-info* fuel) 2.0)
    )
    (set! start-frame-count #f)
    (set! frame-count 0)
    (set! going-back-tp #t)
    (set! (-> *setting-control* user-current allow-pause) #f)
    (print "[MOD] teleport success
")
  )
  
  (when (and (= going-back-tp #t)(= tp-fb-win #f)(= start-frame-count #f)(= tp-fb #t)(< (-> *target* fact health) 1)) ;starts when jak dies again, while in the final boss stage
    (set! start-frame-count #t)
    (set! new-game-s? #f)
    (print "[MOD] started frame-count for game-save load
")
  )
  (when (and (= frame-count 60)(= tp-fb-win #f)(= going-back-tp #t)) ;loads the save you had after 60 frames of DEATH
    (auto-save-command 'restore 0 0 *default-pool* #f)
    (print "[MOD] crash?
")
  )
  (when (and (= going-back-tp #t)(= tp-fb-win #f)(> frame-count 80)(= (pause-allowed?) #t)) ;resets everything back to original state AFTER the game-load, to avoid crashes.
    (set! stored-cp? #f)
    (set! going-back-tp #f)
    (set! start-frame-count #f)
    (set! pause-menu-blocked? #f)
    (set! frame-count 0)
    (when (= hell-mode-option #t)
      (set! (-> *game-info* fuel) 10.0)
    )
    (when (= hell-mode-option #f)
      (set! (-> *game-info* fuel) 2.0)
    )
    (set! weapon-mod-toggle #t)
    (set! mission-grab-1 #f)
    (set! mission-grab-2 #f)
    (set! mission-grab-3 #f)
    (set! mission-grab-4 #f)
    (print "[MOD] It worked!! POGGERS!!! (I logged 42 hours on this problem :D)
")
  )

  (when (and (= stored-cp? #t)(= tp-fb-win #t))
    (set! start-frame-count #t)
    (set! new-game-s? #f)
    (when (and (= stored-cp? #t)(= frame-count 1))
      (auto-save-command 'restore 0 0 *default-pool* #f)
    )
    (when (and (= stored-cp? #t)(= frame-count 120))
      (set! (-> *game-info* buzzer-total) 2.0)
      (print "[MOD] | LEGENDARY | You beat tp-fb and recieved Weapon Mod random-shot! Congratulations!!
")
      (set! stored-cp? #f)
      (set! pause-menu-blocked? #f)
      (set! start-frame-count #f)
      (set! frame-count 0)
      (set! going-back-tp #f)
      (set! weapon-mod-toggle #t)
      (set! mission-grab-1 #f)
      (set! mission-grab-2 #f)
      (set! mission-grab-3 #f)
      (set! mission-grab-4 #f)
      (set! auto-save-delayed? #t)
      (when (= hell-mode-option #t)
        (set! (-> *game-info* fuel) 10.0)
        (+! (-> *game-info* gem) 30.0)
      )
      (when (= hell-mode-option #f)
        (print "[MOD] Rerolling modifier... }:)
")
        (+! (-> *game-info* gem) 30.0)
        (set! mod-pick #t)
      )
    )
  )

;(set! (-> *setting-control* user-current allow-pause) #f)

(when (= pause-menu-blocked? #t)
  (set-master-mode 'game)
)

(when (= auto-save-delayed? #t)
  (+! auto-save-frame 1)
  (when (= auto-save-frame 60)
    (auto-save-user)
    (set! auto-save-frame 0)
    (set! auto-save-delayed? #f)
  )
)





;trip-metalheads function
;--------------------------------------------

  (when (and (or (cpad-pressed? 0 l1)(cpad-pressed? 0 r1)(cpad-pressed? 0 x)(cpad-pressed? 0 square)(cpad-pressed? 0 circle))(rand-vu-percent? 0.008)(= trip-metalheads #t))
    (send-event *target* 'loading)
    (set! trip-start #t)
    (when (and (send-event *target* 'loading)(= trip-cooldown 0))
      (+! (-> *game-info* gem) 10.0)
      (set! trip-start #f)
      (set! trip-cooldown 8000)
    )
  )

  (when (= trip-start #t)
    (when (> trip-cooldown 0)
      (-! trip-cooldown 1)
    )
  )



;target-explode
#|
(when (= target-explode-start #t)
  (send-event *target* 'draw #f)
  (set! (-> *target* fact health) 0.0)
  (set! explode-frame-start #t)
  (auto-save-user)
)
(when (= explode-frame-start #t)
  (+! explode-frames 1)
  (when (= explode-frames 90)
    (auto-save-command 'restore 0 0 *default-pool* #f)
  )
)

|#

(when (= target-explode-start #t)
  (sound-play "explosion")
  (send-event *target* 'draw #f)
  (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
      (set! (-> a1-0 from) (process->ppointer *target*))
      (set! (-> a1-0 num-params) 2)
      (set! (-> a1-0 message) 'attack-invinc)
      (set! (-> a1-0 param 0) (the-as uint #f))
      (let ((v1-3 (new 'static 'attack-info :mask (attack-info-mask mode id))))
        (let* ((a0-1 *game-info*)
               (a2-1 (+ (-> a0-1 attack-id) 1))
               )
          (set! (-> a0-1 attack-id) a2-1)
          (set! (-> v1-3 id) a2-1)
          )
        (set! (-> v1-3 mode) 'big-explosion)
        (set! (-> a1-0 param 1) (the-as uint v1-3))
        )
      (send-event-function *target* a1-0)
      )
      (set! target-explode-start #f)
)


(when (= dark-jacked? #t)
    (when (= target-explode #f)
          (set! (-> (the-as fact-info-target (-> *target* fact)) darkjak-effect-time) (seconds 20))
        )
    (when (= target-explode #t)
          (set! (-> (the-as fact-info-target (-> *target* fact)) darkjak-effect-time) (seconds 60))
        )
    (set! dark-jacked? #f)
  )

;(set! (-> *game-info* eco-pill-dark) (-> *FACT-bank* eco-pill-dark-max-default))
;(set! dark-jacked? #t) ;added for fix

;TODO need to set this so it runs when jak loads in


(when (cpad-pressed? 0 l2)
  (set! dark-jacked? #t)
)


#|
(when (and (= mushroom-movies #t) ())
  (cpad-pressed *target* l2)
)
|#


    
      (if *show-input-display* 
        (input-display-on)
        (input-display-off)
        )
      
      (none)
      )

    (defun runs-on-gem-pickup ()
      

      (none)
      )

    (defun runs-on-task-close ()
    

      (none)
      )
;-------------------------------------------- GREEN ECO MODS!

;-------------------------------------------- WEAPON MODS!

;--------------------------------------------

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? #f))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )

          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )



    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   
      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene

          )
        (('blackout)

          )
        )
      
      (none)
      )





(define help 

"
----------------------------HELP!----------------------------
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
What are the commands to set your Green Eco or Gun Mod?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ALL WEAPON MODS ARE TOGGLED OFF BY DEFAULT, ONCE YOU SET IT ON AND SAVE, THERES NO GOING BACK ON YOUR SAVE.
(unless you set weapon-mod-toggle to false and (-> *game-info* fuel) to 0, then save/load or new game.)


you can set it via (set! weapon-mod-toggle #t) 
(this will choose a random modifier for you)

If you want to re-roll for another modifier you can do so with
(set! mod-reroll #t)
You must have 10 metalhead gems to reroll.


---------------------------------------------------------------------------------------------------------------------
WEAPON MODS: Each weapon mod will come with the option boolean, and an integer (which is referred in example as V) 
storing from 1-4 defining the selected gun. 1=Yellow, 2=Red, 3=Blue, 4=Dark

Example:
(set! rapid-fire-option #t)
(set! rapid-fire-int V)
---------------------------------------------------------------------------------------------------------------------


rapid-fire-option                 Fire rate increased dramatically
rapid-fire-int

double-tap-option                 Every shot has a chance to fire a second without consuming ammo
double-tap-int

infinite-range-option             Every shot follows newtons law              (not working)
infinite-range-int                (meaning every shot has a max range of 999)

big-shot-option                   bigger bullets, bigger hitbox, right?       (not working)
big-shot-int

mag-bag-option                    x3 the ammo on the weapon its attached to (not implemented yet)
mag-bad-int

pm-extra-shot-option              Every shot has a chance to fire a peacemaker shot 
pm-extra-shot-int

predator-shot-option              Every shot has a good chance to spawn a predator shot with it
predator-shot-int                 (this is deprecated, pred shot is in random-shot only, still works)

guard-shot-option                 Your gun can now fire guard projectiles!
guard-shot-int

leg-random-shot                   Your gun can fire every shot known to man.
leg-random-int

Every guard that spawns has a chance to drop a legendary weapon mod. All others are done via missions or burning-bush
---------------------------------------------------------------------------------------------------------------------
GREEN ECO MODS(modifiers): Each mod works differently, but I keep all of it on a toggle boolean.
Example: (set! peacemaker-ability #t)
---------------------------------------------------------------------------------------------------------------------

peacemaker-ability                on any frame, jak has a chance to fire 100 peacemaker shots out of his gun
                                  but you must one-hit every boss fight in the game.

tp-fb                             upon death, theres a good chance jak will respawn at the final boss fight,
                                  BUT theoss is extremely unfair. Upon boss kill, get legendary gun mod.

hover-damage                      Your hoverboard goes much faster, tricks virtually mean nothing for speed
                                  but mostly all enemies (except guards in traffic) have X5 HP. (oof)

dark-traffic                      Every dark eco you collect has a chance to fill your darkjak meter 100%
                                  but any time jak angers the guards, its max alert level

trip-metalheads                   jumping, punching, spinning, rolling, or shooting can make jak trip at a low chance                            
                                  but when you trip, jak gets 10 gems. All metalheads drop infinite gems!

target-explode                    jak has a bomb strapped to his chest, he has a chance of exploding when bonked/hit
                                  but dark jak lasts a lot longer

hell-mode-option                  enabled automatically when in hero-mode. This enables all modifiers }:) good luck

---------------------------------------------------------------------------------------------------------------------
"
)







    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
#|
     these are no longer recommended/supported however we include them anyways to not break anyones mods.
















(defmacro spawn-gem-near-target! (&key (count 5))
  `(dotimes (i ,count)
     (birth-pickup-at-point
       (vector+! (new 'stack 'vector) (target-pos 0) (new 'static 'vector :y (meters 2.0)))
       (pickup-type gem)
       1.0
       #t
       *entity-pool*
       (the fact-info #f))))


    |#











