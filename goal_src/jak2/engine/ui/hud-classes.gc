;;-*-Lisp-*-
(in-package goal)

;; name: hud-classes.gc
;; name in dgo: hud-classes
;; dgos: ENGINE, GAME

;; DECOMP BEGINS

(defmethod draw hud-map ((this hud-map))
  (set-hud-piece-position!
    (-> this sprites 1)
    (the int (+ 492.0 (* 140.0 (-> this offset))))
    (the int (+ 281.0 (* 140.0 (-> this offset))))
    )
  (set-as-offset-from! (the-as hud-sprite (-> this sprites)) (the-as vector4w (-> this sprites 1)) 11 -11)
  (set! (-> this sprites 0 color w)
        (the int (+ 70.0 (* 70.0 (sin (* 182.04445 (the float (-> this values 1 current)))))))
        )
  (set! (-> *minimap* color y)
        (the int (- 96.0 (* 32.0 (sin (* 182.04445 (the float (-> this values 1 current)))))))
        )
  (set! (-> *minimap* color z)
        (the int (- 96.0 (* 32.0 (sin (* 182.04445 (the float (-> this values 1 current)))))))
        )
  (set! (-> this sprites 0 scale-x) 1.0)
  (set! (-> this sprites 0 scale-y) 1.0)
  (when (>= (-> *setting-control* user-current race-minimap) 0)
    (set! (-> this sprites 0 scale-x) 0.0)
    (set! (-> this sprites 0 scale-y) 0.0)
    (set! (-> this sprites 1 scale-x) 0.0)
    (set! (-> this sprites 1 scale-y) 0.0)
    )
  (let ((t9-5 (method-of-type hud draw)))
    (t9-5 this)
    )
  (cond
    ((< (-> *setting-control* user-current race-minimap) 0)
     (with-dma-buffer-add-bucket ((s4-0 (-> *display* frames (-> *display* on-screen) global-buf))
                                  (bucket-id progress)
                                  )
       (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites 1)) 2 -3)
       (draw-1 *minimap* s4-0 (the-as vector4w (-> this sprites 2)) #t)
       )
     )
    ((zero? (-> *setting-control* user-current race-minimap))
     (let ((s5-1 (level-get *level* 'stadiumb)))
       (when (and s5-1 (= (-> s5-1 status) 'active))
         (set-race-texture
           *minimap*
           (lookup-texture-by-id (new 'static 'texture-id :index #x10 :page #xc25))
           16837.018
           s5-1
           )
         (set-race-corner *minimap* -1609044.0 -2978676.8)
         (with-dma-buffer-add-bucket ((s4-2 (-> *display* frames (-> *display* on-screen) global-buf))
                                      (bucket-id progress)
                                      )
           (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites 1)) 10 -15)
           (draw-sprite2 *minimap* s4-2 (the-as vector4w (-> this sprites 2)) #t)
           )
         )
       )
     )
    ((= (-> *setting-control* user-current race-minimap) 1)
     (let ((s5-3 (level-get *level* 'stadiumc)))
       (when (and s5-3 (= (-> s5-3 status) 'active))
         (set-race-corner *minimap* -951910.4 -3694182.5)
         (set-race-texture
           *minimap*
           (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #xd17))
           13907.148
           s5-3
           )
         (with-dma-buffer-add-bucket ((s4-4 (-> *display* frames (-> *display* on-screen) global-buf))
                                      (bucket-id progress)
                                      )
           (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites 1)) 20 -8)
           (draw-sprite2 *minimap* s4-4 (the-as vector4w (-> this sprites 2)) #t)
           )
         )
       )
     )
    ((= (-> *setting-control* user-current race-minimap) 2)
     (let ((s5-5 (level-get *level* 'stadiumd)))
       (when (and s5-5 (= (-> s5-5 status) 'active))
         (set-race-corner *minimap* -1862860.8 -3283353.5)
         (set-race-texture
           *minimap*
           (lookup-texture-by-id (new 'static 'texture-id :index #x1 :page #xd18))
           18255.871
           s5-5
           )
         (with-dma-buffer-add-bucket ((s4-6 (-> *display* frames (-> *display* on-screen) global-buf))
                                      (bucket-id progress)
                                      )
           (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites 1)) 10 -8)
           (draw-sprite2 *minimap* s4-6 (the-as vector4w (-> this sprites 2)) #t)
           )
         )
       )
     )
    ((= (-> *setting-control* user-current race-minimap) 3)
     0
     )
    )
  0
  (none)
  )

(defmethod update-values hud-map ((this hud-map))













;PLAYABLE BLACKJACK AT HIPHOG WITH GEMS IN DEBUGGER:

(when (= bj-start #t)
  (+! bj-count 1)
  (set! in-transition? #t)
  (when (= bj-count 60)
    (set! no-state-camera-table #t)
    (set! in-hiphog? #t)
    (set! bj-count 0)
    (set! bj-start #f)
    (set! in-transition? #f)
  )
)

;POPUP MENU
(when (and (= on-table? #f)(not (cpad-pressed? 0 r3))(not *scene-player*) (= (paused?) #f)(= in-granger? #f)(= weapon-mod-toggle #t)(= (-> (level-get-target-inside *level*) name) 'hiphog))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_RED>R3:<COLOR_PINK> Play Eco War"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

;CONTROLS FOR ALL STATES
(when (and (not *scene-player*) (= (paused?) #f)(= weapon-mod-toggle #t))
  (when (and (cpad-pressed? 0 r3)(= in-hiphog? #f)(= (-> (level-get-target-inside *level*) name) 'hiphog)) ;enter table
    (set! pause-menu-blocked? #t)
    (set! bj-start #t)
    (send-event *target* 'draw #f)
    (process-grab? *target* #f)
    (set-vector! (-> *target* control trans) (meters -82.0494) (meters 10.853) (meters 1283.3468) 1.0) ;teleports jak under table
    (set! on-table? #t)
    (print "Welcome to the Table!")
    (print "Choose your Dealer (left/right):")
  )
  (when (and (cpad-pressed? 0 triangle)(= in-hiphog? #t)(= (-> (level-get-target-inside *level*) name) 'hiphog)) ;exit table
    (set-vector! (-> *target* control trans) (meters -86.7356) (meters 14.2) (meters 1291.5367) 1.0); makes jak appear next to table
    (set! no-state-camera-table #f)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (send-event *target* 'draw #t)
    (process-release? *target*)
    (set! in-hiphog? #f)
    (set! in-pre-game? #f)
    (set! in-blackjack? #f)
    (set! bj-start #f)
    (set! bj-count 0)
    (set! round-started? #f)
    (set! added-cards-dealer 0)
    (set! added-cards-jak 0)
    (set! jak-current-card 0)
    (set! dealer-current-card 0)
    (set! bid-amount 0.0)
    (set! bid-select 0)
    (set! bj-win #f)
    (set! bj-lose #f)
    (set! char-on-table 1)
    (set! pause-menu-blocked? #f)
    (set! win-count 0)
    (set! lose-count 0)
    (set! hitting? #f)
    (set! dealer-stay #f)
    (set! bj-double-down #f)
    (set! on-table? #f)
    (set! jcard1 #f)
    (set! jcard1i 0)
    (set! jcard2 #f)
    (set! jcard2i 0)
    (set! jcard3 #f)
    (set! jcard3i 0)
    (set! jcard4 #f)
    (set! jcard4i 0)
    (set! dcard1 #f)
    (set! dcard1i 0)
    (set! dcard2 #f)
    (set! dcard2i 0)
    (set! dcard3 #f)
    (set! dcard3i 0)
    (set! dcard4 #f)
    (set! dcard4i 0)
    (set! jturn 0)
    (set! dturn 0)
    (set! jackpot-win #f)
    (set! jackpotbaby #f)
    (set! jackpotbabytime 0)
    (set! bj-bid-s "0")
    (set! bj-dealer-s "Sig")
    (print "Exited Table!")
  )


  (when (= no-state-camera-table #t) ;is given no state and is invisible, tp's target inside of table
    (set! (-> *target* cam-user-mode) 'fixed)
    (set-setting-by-param *setting-control* 'mode-name 'cam-really-fixed 0 0)
    (send-event *camera* 'teleport-to-vector-start-string (new 'static 'vector :x (meters -80.2473) :y (meters 14.0607) :z (meters 1286.0913)))
  )


  (when (and (= in-pre-game? #t)(= in-hiphog? #t)(= in-blackjack? #f)(cpad-pressed? 0 x)) ;select x pick bid-screen
      (set! table-activate #t)
      (when (and (= bid-select 1)(>= (-> *game-info* gem) 5.0))
        (set! bid-current 10.0)
        (print "set bid amount to 5
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 5.0)
        (set! bid-amount 5.0)
        (auto-save-user)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (= bid-select 2)(>= (-> *game-info* gem) 10.0))
        (set! bid-current 20.0)
        (print "set bid amount to 10
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 10.0)
        (set! bid-amount 10.0)
        (auto-save-user)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (>= (-> *game-info* gem) 25.0)(= bid-select 3))
        (set! bid-current 50.0)
        (print "set bid amount to 25
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 25.0)
        (set! bid-amount 25.0)
        (auto-save-user)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (>= (-> *game-info* gem) 50.0)(= bid-select 4))
        (set! bid-current 100.0)
        (print "set bid amount to 50
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 50.0)
        (set! bid-amount 50.0)
        (auto-save-user)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (>= (-> *game-info* gem) 100.0)(= bid-select 5))
        (set! bid-current 200.0)
        (print "set bid amount to 100
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 100.0)
        (set! bid-amount 100.0)
        (auto-save-user)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
      (when (and (>= (-> *game-info* gem) 1000.0)(= bid-select 6))
        (set! bid-current 2000.0)
        (print "set bid amount to 1000
")
        (set! in-blackjack? #t)
        (-! (-> *game-info* gem) 1000.0)
        (set! bid-amount 1000.0)
        (auto-save-user)
        (play-sound-file "data/goal_src/jak2/pc/snd/bid.mp3" 100)
        (set! colorcard #t)
      )
    )

  (when (and (= in-pre-game? #t) (= in-blackjack? #f) (= in-hiphog? #t) (cpad-pressed? 0 left)) ;select left bid-screen
    (-! bid-select 1)
    (when (< bid-select 0)
      (set! bid-select 0)
    )
    (set! table-activate #t)
  )


  (when (and (= in-pre-game? #t) (= in-blackjack? #f) (= in-hiphog? #t) (cpad-pressed? 0 right)) ;select right bid-screen
    (+! bid-select 1)
    (when (and (and (!= (-> *game-info* task-deaths) 3)(!= (-> *game-info* task-deaths) 4))(>= bid-select 6))
      (set! bid-select 5)
    )
    (when (and (>= bid-select 7))
      (set! bid-select 6)
    )
    (set! table-activate #t)
  )

  (when (and (= in-pre-game? #f)(= in-hiphog? #t)(= in-blackjack? #f)(cpad-pressed? 0 x)) ;select X pick your character 
      (set! table-activate #t)
      
      (let ((start-rand 0))

      (when (= char-on-table 1)
        (print "Set character to Sig!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 17)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Sig")
        (set! start-rand (rand-vu-int-range 1 2))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-start.mp3" 100)
        )
        (when (= start-rand 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-start2.mp3" 100)
        )
      )
      (when (= char-on-table 2)
        (print "Set character to Krew!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 18)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Krew")
        (set! start-rand (rand-vu-int-range 1 2))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-start.mp3" 100)
        )
        (when (= start-rand 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-start2.mp3" 100)
        )
      )
      (when (= char-on-table 3)
        (print "Set character to Torn!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 16)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Torn")
        (set! start-rand (rand-vu-int-range 1 1))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-start.mp3" 100)
        )
      )
      (when (= char-on-table 4)
        (print "Set character to Ashelin!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 17)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Ashelin")
        (set! start-rand (rand-vu-int-range 1 1))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-start.mp3" 100)
        )
      )
      (when (= char-on-table 5)
        (print "Set character to Pecker!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 15)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Pecker")
        (set! start-rand (rand-vu-int-range 1 1))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-start.mp3" 100)
        )
      )
      (when (= char-on-table 6)
        (print "Set character to Jinx!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 16)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Jinx")
        (set! start-rand (rand-vu-int-range 1 2))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-start.mp3" 100)
        )
        (when (= start-rand 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-start2.mp3" 100)
        )
      )
      (when (= char-on-table 7)
        (print "Set character to Errol!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 19)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Errol")
        (set! start-rand (rand-vu-int-range 1 2))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-start.mp3" 100)
        )
        (when (= start-rand 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-start2.mp3" 100)
        )
      )
      (when (= char-on-table 8)
        (print "Set character to Daxter!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! dealer-cap 20)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 80)
        (set! current-dealer "Daxter")
        (set! start-rand (rand-vu-int-range 1 1))
        (when (= start-rand 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-start.mp3" 100)
        )
      )
      (when (= char-on-table 9)
        (print "Set character to Mute!
")
        (print "choose your bid
")
        (set! in-pre-game? #t)
        (set! current-dealer "Muted")
        (set! dealer-cap 17)
        (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 100)
      )
    )
  )

  (when (and (= in-pre-game? #f) (= in-blackjack? #f) (= in-hiphog? #t) (cpad-pressed? 0 left)) ;select left pick your character
    (-! char-on-table 1)
    (when (<= char-on-table 0)
      (set! char-on-table 1)
    )
    (set! table-activate #t)
  )


  (when (and (= in-pre-game? #f) (= in-blackjack? #f) (= in-hiphog? #t) (cpad-pressed? 0 right)) ;select right pick your character
    (+! char-on-table 1)
    (when (and (cpad-pressed? 0 right)(>= char-on-table 10))
      (set! char-on-table 9)
    )
    (set! table-activate #t)
  )

;(the int (-> *setting-control* user-current sfx-volume))
(when (= bj-lose #t) ;you suck
  (+! lose-count 1)
  (set! in-hiphog? #f)
  (set! dcard2 #t)
  (set! jcard3 #t)
  (set! jcard4 #t)
  (when (= lose-count 10)
    (let ((rand-sound 0))
      (when (= char-on-table 1)
        (set! rand-sound (rand-vu-int-range 1 4))                                                      ;For Losing
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-win2.mp3"100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-win4.mp3" 100)
        )
      )
      (when (= char-on-table 2)
        (set! rand-sound (rand-vu-int-range 1 6))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-win6.mp3" 100)
        )
      )
      (when (= char-on-table 3)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-win.mp3" 74)
        )
      )
      (when (= char-on-table 4)
        (set! rand-sound (rand-vu-int-range 1 7))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/ash-win7.mp3" 100)
        )
      )
      (when (= char-on-table 5)
        (set! rand-sound (rand-vu-int-range 1 7))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-win7.mp3" 100)
        )
      )
      (when (= char-on-table 6)
        (set! rand-sound (rand-vu-int-range 1 8))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win2.mp3"100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win7.mp3" 100)
        )
        (when (= rand-sound 8)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-win8.mp3" 100)
        )
      )
      (when (= char-on-table 7)
        (set! rand-sound (rand-vu-int-range 1 7))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-win7.mp3" 100)
        )
      )
      (when (= char-on-table 8)
        (set! rand-sound (rand-vu-int-range 1 8))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win7.mp3" 100)
        )
        (when (= rand-sound 8)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-win8.mp3" 100)
        )
      )
    )
  )
  (when (and (rand-vu-percent? 0.4)(= lose-count 150))
    (let ((rand-sound 0))
      (when (= char-on-table 8)
        (set! rand-sound (rand-vu-int-range 1 3))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jak-lose-againstdaxter.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jak-lose-againstdaxter2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/jak-lose-againstdaxter2.mp3" 100)
        )
      )
    )
  )
  (when (and (= lose-count 300))                                                     ;For Again?
    (let ((rand-sound 0))
    (when (rand-vu-percent? 0.5)
      (when (= char-on-table 1)
        (set! rand-sound (rand-vu-int-range 1 3))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-again.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-again2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-again3.mp3" 100)
        )
      )
      (when (= char-on-table 2)
        (set! rand-sound (rand-vu-int-range 1 2))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-again.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-again2.mp3" 100)
        )
      )
      (when (= char-on-table 3)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-again.mp3" 100)
        )
      )
      (when (= char-on-table 4)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-again.mp3" 100)
        )
      )
      (when (= char-on-table 5)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-again.mp3" 100)
        )
      )
      (when (= char-on-table 6)
        (set! rand-sound (rand-vu-int-range 1 2))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-again.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-again.mp3" 100)
        )
      )
      (when (= char-on-table 7)
        (set! rand-sound (rand-vu-int-range 1 2))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-again.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-again2.mp3" 100)
        )
      )
      (when (= char-on-table 8)
        (set! rand-sound (rand-vu-int-range 1 1))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-again.mp3" 100)
        )
      )
    )
    )
    (set! in-hiphog? #t)
    (set! in-blackjack? #f)
    (set! round-started? #f)
    (set! added-cards-dealer 0)
    (set! added-cards-jak 0)
    (set! jak-current-card 0)
    (set! dealer-current-card 0)
    (set! bid-amount 0.0)
    (set! bid-select 0)
    (set! bj-win #f)
    (set! bj-lose #f)
    (set! bj-hit #f)
    (set! bj-stay #f)
    (set! lose-count 0)
    (set! hitting? #f)
    (set! dealer-stay #f)
    (set! bj-double-down #f)
    (set! jcard1 #f)
    (set! jcard1i 0)
    (set! jcard2 #f)
    (set! jcard2i 0)
    (set! jcard3 #f)
    (set! jcard3i 0)
    (set! jcard4 #f)
    (set! jcard4i 0)
    (set! dcard1 #f)
    (set! dcard1i 0)
    (set! dcard2 #f)
    (set! dcard2i 0)
    (set! dcard3 #f)
    (set! dcard3i 0)
    (set! dcard4 #f)
    (set! dcard4i 0)
    (set! jturn 0)
    (set! dturn 0)
    (set! bj-bid-s "0")
    (set! bj-dealer-s "Sig")
    (set! jackpot-win #f)
    (set! jackpotbaby #f)
    (set! jackpotbabytime 0)
    (play-sound-file "data/goal_src/jak2/pc/snd/shuffle.mp3" 100)
    (print "select bid amount:")
  )
)

(when (= bj-win #t) ;you still stuck cuz its mostly all luck
  (+! win-count 1)
  (when (= win-count 1)
    (play-sound-file "data/goal_src/jak2/pc/snd/win.mp3" 100)
    (set! in-hiphog? #f)
    (set! dcard2 #t)
    (set! jcard3 #t)
    (set! jcard4 #t)
  )
  (when (and (= jackpot-win #t) (= win-count 2))
    (+! (-> *game-info* gem) (*! bid-current 10))
    (set! (-> *game-info* total-trys) 1)
    (set! jackpotbaby #t)
  )
  (when (and (= jackpot-win #f)(= win-count 2))
    (+! (-> *game-info* gem) bid-current)
  )
  (when (= win-count 10)
    (let ((rand-sound 0))
      (set! rand-sound (rand-vu-int-range 1 5))
      (when (= rand-sound 1)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win.mp3" 100)
      )
      (when (= rand-sound 2)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win2.mp3" 100)
      )
      (when (= rand-sound 3)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win3.mp3" 100)
      )
      (when (= rand-sound 4)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win4.mp3" 100)
      )
      (when (= rand-sound 5)
        (play-sound-file "data/goal_src/jak2/pc/snd/jak-win5.mp3" 100)
      )
      (auto-save-user)
    )

  )
  (when (and (= win-count 80)(rand-vu-percent? 0.5))
    (let ((rand-sound 0))
      (when (= char-on-table 1)
        (set! rand-sound (rand-vu-int-range 1 2))                                                      ;For Losing
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/sig-lose2.mp3" 100)
        )
      )
      (when (= char-on-table 2)
        (set! rand-sound (rand-vu-int-range 1 2))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/krew-lose4.mp3" 100)
        )
      )
      (when (= char-on-table 3)
        (set! rand-sound (rand-vu-int-range 1 4))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/torn-lose4.mp3" 100)
        )
      )
      (when (= char-on-table 4)
        (set! rand-sound (rand-vu-int-range 1 6))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/ashelin-lose6.mp3" 100)
        )
      )
      (when (= char-on-table 5)
        (set! rand-sound (rand-vu-int-range 1 3))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-lose.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/pecker-lose.mp3" 100)
        )
      )
      (when (= char-on-table 6)
        (set! rand-sound (rand-vu-int-range 1 9))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose5.mp3" 100)
        )
        (when (= rand-sound 6)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose6.mp3" 100)
        )
        (when (= rand-sound 7)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose7.mp3" 100)
        )
        (when (= rand-sound 8)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose8.mp3" 100)
        )
        (when (= rand-sound 9)
          (play-sound-file "data/goal_src/jak2/pc/snd/jinx-lose9.mp3" 100)
        )
      )
      (when (= char-on-table 7)
        (set! rand-sound (rand-vu-int-range 1 5))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose.mp3" 100)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose2.mp3" 100)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose4.mp3" 100)
        )
        (when (= rand-sound 5)
          (play-sound-file "data/goal_src/jak2/pc/snd/errol-lose5.mp3" 100)
        )
      )
      (when (= char-on-table 8)
        (set! rand-sound (rand-vu-int-range 1 4))
        (when (= rand-sound 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-lose.mp3" 40)
        )
        (when (= rand-sound 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-lose2.mp3" 60)
        )
        (when (= rand-sound 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-lose3.mp3" 100)
        )
        (when (= rand-sound 4)
          (play-sound-file "data/goal_src/jak2/pc/snd/daxter-lose4.mp3" 100)
        )
      )
    )
  )
  (when (= win-count 300)
    (set! in-blackjack? #f)
    (set! in-hiphog? #t)
    (set! round-started? #f)
    (set! added-cards-dealer 0)
    (set! added-cards-jak 0)
    (set! jak-current-card 0)
    (set! dealer-current-card 0)
    (set! bid-amount 0.0)
    (set! bid-select 0)
    (set! win-count 0)
    (set! bj-win #f)
    (set! bj-lose #f)
    (set! bj-stay #f)
    (set! bj-hit #f)
    (set! hitting? #f)
    (set! dealer-stay #f)
    (set! bj-double-down #f)
    (set! jcard1 #f)
    (set! jcard1i 0)
    (set! jcard2 #f)
    (set! jcard2i 0)
    (set! jcard3 #f)
    (set! jcard3i 0)
    (set! jcard4 #f)
    (set! jcard4i 0)
    (set! dcard1 #f)
    (set! dcard1i 0)
    (set! dcard2 #f)
    (set! dcard2i 0)
    (set! dcard3 #f)
    (set! dcard3i 0)
    (set! dcard4 #f)
    (set! dcard4i 0)
    (set! jturn 0)
    (set! dturn 0)
    (set! jackpot-win #f)
    (set! jackpotbaby #f)
    (set! jackpotbabytime 0)
    (set! bj-bid-s "0")
    (set! bj-dealer-s "Sig")
    (print "select bid amount:")
  )
)



                                                                                                                                                    ;BLACKJACK GAME

  (when (and (= hitting? #f) (= in-pre-game? #t) (= in-blackjack? #t) (= in-hiphog? #t) (cpad-pressed? 0 square)) ;play blackjack hit
    (set! bj-hit #t)
    (set! hitting? #t)
  )
  (when (and (= hitting? #f) (= in-pre-game? #t) (= in-blackjack? #t) (= in-hiphog? #t) (cpad-pressed? 0 circle)) ;play blackjack stay
    (set! bj-stay #t)
    (set! hitting? #t)
    (play-sound-file "data/goal_src/jak2/pc/snd/stay.mp3" 100)
  )
  (when (and (>= (-> *game-info* gem) bid-current) (= hitting? #f) (= in-pre-game? #t)  (= in-blackjack? #t) (= in-hiphog? #t) (cpad-pressed? 0 r1)) ;play blackjack double down
    (set! bj-double-down #t)
    (set! hitting? #t)
  )

  (when (and (= hitting? #t)(= in-hiphog? #t))   ;activates once when an option is selected from the three above
    (when (= bj-hit #t)                                                   ;upon jak hit
      (set! jak-current-card (rand-vu-int-range 1 10))
      (set! added-cards-jak (+! added-cards-jak jak-current-card))
      (+! jturn 1)
      (when (= jturn 3)
        (set! jcard3i jak-current-card)
        (set! jcard3 #t)
      )
      (when (= jturn 4)
        (set! jcard4i jak-current-card)
        (set! jcard4 #t)
        (when (= jackpot-win #t)
          (set! jcard1s "<COLOR_PINK>~d")
          (set! jcard2s "<COLOR_PINK>~d")
          (set! jcard3s "<COLOR_PINK>~d")
          (set! jcard4s "<COLOR_PINK>~d")
        )
      )
      (let ((cnumb 0))
        (set! cnumb (rand-vu-int-range 1 3))
        (when (= cnumb 1)
          (play-sound-file "data/goal_src/jak2/pc/snd/card1.mp3" 100)
        )
        (when (= cnumb 2)
          (play-sound-file "data/goal_src/jak2/pc/snd/card2.mp3" 100)
        )
        (when (= cnumb 3)
          (play-sound-file "data/goal_src/jak2/pc/snd/card3.mp3" 100)
        )
      )
      (when (>= added-cards-jak 22)
        (set! bj-lose #t)
        (print "Bust!")
        (set! dcard2 #t)
      )
      (when (<= added-cards-jak 21)
        (format #t "~%Hit! Recieved a ~d" jak-current-card)
      )
      (set! hitting? #f)
      (set! bj-hit #f)
    )
    (when (= bj-stay #t)                                                   ;upon jak stay
      (set! dh-start #t)
      (when (= dh-start #t)
        (+! d-count 1)
        (when (>= d-count 30)
          (when (<= added-cards-dealer dealer-cap)
        (set! dealer-current-card (rand-vu-int-range 1 10))
        (set! added-cards-dealer (+! added-cards-dealer dealer-current-card))
        (+! dturn 1)
        (when (= dturn 3)
          (set! dcard3i dealer-current-card)
          (set! dcard3 #t)
        )
        (when (= dturn 4)
          (set! dcard4i dealer-current-card)
          (set! dcard4 #t)
        )
        (set! dcard2 #t)
        (set! d-count 0)
      )
      (when (or (>= added-cards-dealer dealer-cap)(> added-cards-dealer added-cards-jak))               ;play dealer stay
        (set! dealer-stay #t)
        (set! bj-stay #f)
        (set! dh-start #f)
      )
      (when (>= added-cards-dealer 22)                                                                 ;play dealer bust
        (set! bj-win #t)
        (set! bj-stay #f)
        (set! dh-start #f)
        (print "Dealer Busts!
")
        (format #t "~%You win ~f!" bid-current)
      )
      (when (>= added-cards-jak 22)                                                                 ;play jak bust
        (set! bj-lose #t)
        (set! bj-stay #f)
        (set! dh-start #f)
        (set! dcard2 #t)
        (print "You Bust!
")
      )
        )
      )
    )
    (when (= bj-double-down #t)
      (*! bid-current 2)
      (-! (-> *game-info* gem) bid-amount)
      (set! jak-current-card (rand-vu-int-range 1 10))
      (set! added-cards-jak (+! added-cards-jak jak-current-card))
      (set! bj-stay #t)
      (set! bj-double-down #f)
      (auto-save-user)
      (print "Double Down.")
    )
    (when (= dealer-stay #t)
    (when (and (= dcard3 #f)(= dturn 3))
        (set! dcard3i dealer-current-card)
        (set! dcard3 #t)
      )
      (when (and (= dcard4 #f)(= dturn 4))
        (set! dcard4i dealer-current-card)
        (set! dcard4 #t)
      ) 
      (let ((o #f))
        (when (and (= o #f)(> added-cards-dealer added-cards-jak)(<= added-cards-dealer 21))
          (set! bj-lose #t)
          (print "Dealer Wins!")
          (set! dealer-stay #f)
          (set! o #t)
        )
        (when (and (= o #f)(= added-cards-dealer added-cards-jak)(<= added-cards-jak 21))
          (set! bj-lose #t)
          (+! (-> *game-info* gem) (-! bid-current bid-amount))
          (print "Draw!")
          (set! hitting? #f)
          (set! dealer-stay #f)
          (set! o #t)
        )
        (when (and (= o #f)(> added-cards-jak added-cards-dealer)(<= added-cards-jak 21))
          (set! bj-win #t)
          (format #t "~%You win ~f!" bid-current)
          (set! dealer-stay #f)
          (set! o #t)
        )
      )
    )
  )

  ;----------------TABLE ACTIVATED----------------------------------------- ;Refreshes the menu screen on-table, draws the menu screen using attributes listed above (this'll be big)
  (when (= table-activate #t)
    (when (and (= in-blackjack? #f)(= in-pre-game? #t))
      (when (= bid-select 1)
        (print "5")
        (set! bj-bid-s "5")
      )
      (when (= bid-select 2)
        (print "10")
        (set! bj-bid-s "10")
      )
      (when (= bid-select 3)
        (print "25")
        (set! bj-bid-s "25")
      )
      (when (= bid-select 4)
        (print "50")
        (set! bj-bid-s "50")
      )
      (when (= bid-select 5)
        (print "100")
        (set! bj-bid-s "100")
      )
      (when (= bid-select 6)
        (print "1000")
        (set! bj-bid-s "1000")
      )
    )
    ;(play-rand-sound sig-start (the int (-> *setting-control* default sfx-volume)))
    (when (and (= in-blackjack? #f)(= in-pre-game? #f))
      (when (= char-on-table 1)
        (print "sig")
        (set! bj-dealer-s "Sig")
      )
      (when (= char-on-table 2)
        (print "krew")
        (set! bj-dealer-s "Krew")
      )
      (when (= char-on-table 3)
        (print "torn")
        (set! bj-dealer-s "Torn")
      )
      (when (= char-on-table 4)
        (print "ashelin")
        (set! bj-dealer-s "Ashelin")
      )
      (when (= char-on-table 5)
        (print "pecker")
        (set! bj-dealer-s "Pecker")
      )
      (when (= char-on-table 6)
        (print "jinx")
        (set! bj-dealer-s "Jinx")
      )
      (when (= char-on-table 7)
        (print "errol")
        (set! bj-dealer-s "Errol")
      )
      (when (= char-on-table 8)
        (print "daxter")
        (set! bj-dealer-s "Daxter")
      )
      (when (= char-on-table 9)
        (print "jak1 Mute")
        (set! bj-dealer-s "Jak 1 (Mute)")
      )
    )

    (when (and (= in-pre-game? #t) (= in-blackjack? #t))
    
    (print "IN BLACKJACK - CONTROLS:
CIRCLE - Stay
SQUARE - Hit
R1 - Double Down")

    (when (= round-started? #f)
      (print "Started Round!")
      (set! jak-current-card (rand-vu-int-range 1 10))
      (when (= jak-current-card 1)
        (set! jak-current-card 11)
      )
      (+! jturn 1)
      (set! jcard1i jak-current-card)
      (set! jcard1 #t)
      (set! added-cards-jak (+! added-cards-jak jak-current-card))
      (set! jak-current-card (rand-vu-int-range 1 10))
      (+! jturn 1)
      (set! jcard2i jak-current-card)
      (set! jcard2 #t)
      (set! added-cards-jak (+! added-cards-jak jak-current-card))
      (set! dealer-current-card (rand-vu-int-range 1 10))
      (when (= dealer-current-card 1)
        (set! dealer-current-card 11)
      )
      (+! dturn 1)
      (set! dcard1i dealer-current-card)
      (set! dcard1 #t)
      (set! added-cards-dealer (+! added-cards-dealer dealer-current-card))
      (set! dealer-current-card (rand-vu-int-range 1 10))
      (+! dturn 1)
      (set! dcard2i dealer-current-card)
      (set! added-cards-dealer (+! added-cards-dealer dealer-current-card))
      (format #t "~%Dealer Card Amount: ~d" added-cards-dealer)
      (format #t "~%Jak Card Amount: ~d" added-cards-jak)
      (set! round-started? #t)
    )
  )
    (set! table-activate #f)
  )
(when (and (= on-table? #t) (cpad-hold? 0 down))
(when (= in-hiphog? #t)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_WHITE>LEFT/RIGHT: Browse
~%X:Select
~%Square: Hit
~%CIRCLE: Stay
~%R1: Double Down!
~%<COLOR_WHITE>Triangle: Exit"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 300 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

)

(when (and (= on-table? #t) (not (cpad-hold? 0 down)))
(when (= in-transition? #f)
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_RED>Down:<COLOR_WHITE> Instructions/Buttons"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 400 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

)

  (when (and (= on-table? #t)(cpad-hold? 0 down))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "
Eco War is similar to BlackJack, but with a twist!
~%Upon bidding, both players will get dealt 2 ecos, each with their own amount.
~%You may choose to hit, which gives you another random eco and an amount.
~%If your total eco amount is higher than 21, you bust!
~%If you choose to stay, you must beat the dealer's total eco.
~%Choosing to double down will double your bid, hit, and stay afterwards.
~%You may hit up past 4 numbers without losing, so long as the total stays under 21.
~%<COLOR_PINK>If you hit all four ecos of the same eco type, you'll channel dark eco.
~%Winning while channeling hits JakPot, which multiplies the amount in the pot by 10!
~%Losing while channeling will not multiply anything.
~%<COLOR_GREEN>Good Luck!
  "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 265 60 0.0 (font-color default) (font-flags middle shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (not (cpad-hold? 0 down))
    (when (and (= in-hiphog? #t) (not (cpad-hold? 0 x)) (= round-started? #f) (= in-pre-game? #f) (= on-table? #t))
      (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_YELLOW>Choose your Dealer:
  ~%<COLOR_GREEN>~s
    "
  bj-dealer-s
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        
        
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= in-hiphog? #t) (cpad-hold? 0 x) (= round-started? #f) (= in-pre-game? #f) (= on-table? #t))
      (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_YELLOW>Choose your Dealer:
  ~%<COLOR_WHITE>~s
    "
  bj-dealer-s
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        
        
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )

    
    (when (and (= in-hiphog? #t) (not (cpad-hold? 0 x)) (= round-started? #f) (= in-pre-game? #t) (= on-table? #t))
      (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_YELLOW>Bid:
  ~%<COLOR_GREEN>~s
    "
  bj-bid-s
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        
        
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (and (= in-hiphog? #t) (cpad-hold? 0 x) (= round-started? #f) (= in-pre-game? #t) (= on-table? #t))
      (clear matt-str)
      (clear *pc-encoded-matt-str*)
    (format matt-str "
  <COLOR_YELLOW>Bid:
  ~%<COLOR_WHITE>~s
    "
  bj-bid-s
      )
      (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
      (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
        
        
        (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
        (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 260 130 0.0 (font-color default) (font-flags middle shadow kerning large))))
          (set! (-> font-ctx scale) 0.325)
          (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )


  (when (and (= round-started? #t) (= on-table? #t))
    (when (= in-hiphog? #t)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_RED>Dealer's Eco Amount: <COLOR_WHITE>??"
    added-cards-dealer
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 125 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (when (= in-hiphog? #f)
      (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_RED>Dealer's Eco Amount: <COLOR_WHITE>~d"
    added-cards-dealer
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 125 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    )
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_YELLOW>Current Pot: <COLOR_WHITE>~d"
    (the int bid-current)
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 290 135 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_GREEN>Jak's Eco Amount: <COLOR_WHITE>~d"
    added-cards-jak
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 145 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (and (= in-transition? #f)(= on-table? #t))
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_WHITE>Your Skull Gems: <COLOR_YELLOW>~d"
    (the int (-> *game-info* gem))
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 280 0.0 (font-color default) (font-flags  shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (= in-pre-game? #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_YELLOW>Current Dealer: <COLOR_GREEN>~s"
    current-dealer
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags  shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  )

                                                                                                                                        ;SET COLOR OF CARDS

  (when (= colorcard #t)
    (let ((c 0))
    (set! c (rand-vu-int-range 1 4))
    (when (= c 1)
      (set! jcard1s "<COLOR_RED>~d")
    )
    (when (= c 2)
      (set! jcard1s "<COLOR_BLUE>~d")
    )
    (when (= c 3)
      (set! jcard1s "<COLOR_GREEN>~d")
    )
    (when (= c 4)
      (set! jcard1s "<COLOR_YELLOW>~d")
    )
  (let ((c1 0))
    (set! c1 (rand-vu-int-range 1 4))
    (when (= c1 1)
      (set! jcard2s "<COLOR_RED>~d")
    )
    (when (= c1 2)
      (set! jcard2s "<COLOR_BLUE>~d")
    )
    (when (= c1 3)
      (set! jcard2s "<COLOR_GREEN>~d")
    )
    (when (= c1 4)
      (set! jcard2s "<COLOR_YELLOW>~d")
    )
  (let ((c2 0))
    (set! c2 (rand-vu-int-range 1 4))
    (when (= c2 1)
      (set! jcard3s "<COLOR_RED>~d")
    )
    (when (= c2 2)
      (set! jcard3s "<COLOR_BLUE>~d")
    )
    (when (= c2 3)
      (set! jcard3s "<COLOR_GREEN>~d")
    )
    (when (= c2 4)
      (set! jcard3s "<COLOR_YELLOW>~d")
    )
  (let ((c3 0))
    (set! c3 (rand-vu-int-range 1 4))
    (when (= c3 1)
      (set! jcard4s "<COLOR_RED>~d")
    )
    (when (= c3 2)
      (set! jcard4s "<COLOR_BLUE>~d")
    )
    (when (= c3 3)
      (set! jcard4s "<COLOR_GREEN>~d")
    )
    (when (= c3 4)
      (set! jcard4s "<COLOR_YELLOW>~d")
    )
  (let ((c4 0))
    (set! c4 (rand-vu-int-range 1 4))
    (when (= c4 1)
      (set! dcard1s "<COLOR_RED>~d")
    )
    (when (= c4 2)
      (set! dcard1s "<COLOR_BLUE>~d")
    )
    (when (= c4 3)
      (set! dcard1s "<COLOR_GREEN>~d")
    )
    (when (= c4 4)
      (set! dcard1s "<COLOR_YELLOW>~d")
    )
  (let ((c5 0))
    (set! c5 (rand-vu-int-range 1 4))
    (when (= c5 1)
      (set! dcard2s "<COLOR_RED>~d")
    )
    (when (= c5 2)
      (set! dcard2s "<COLOR_BLUE>~d")
    )
    (when (= c5 3)
      (set! dcard2s "<COLOR_GREEN>~d")
    )
    (when (= c5 4)
      (set! dcard2s "<COLOR_YELLOW>~d")
    )
  (let ((c6 0))
    (set! c6 (rand-vu-int-range 1 4))
    (when (= c6 1)
      (set! dcard3s "<COLOR_RED>~d")
    )
    (when (= c6 2)
      (set! dcard3s "<COLOR_BLUE>~d")
    )
    (when (= c6 3)
      (set! dcard3s "<COLOR_GREEN>~d")
    )
    (when (= c6 4)
      (set! dcard3s "<COLOR_YELLOW>~d")
    )
  (let ((c7 0))
    (set! c7 (rand-vu-int-range 1 4))
    (when (= c7 1)
      (set! dcard4s "<COLOR_RED>~d")
    )
    (when (= c7 2)
      (set! dcard4s "<COLOR_BLUE>~d")
    )
    (when (= c7 3)
      (set! dcard4s "<COLOR_GREEN>~d")
    )
    (when (= c7 4)
      (set! dcard4s "<COLOR_YELLOW>~d")
    )
    

    (when (and (= c c1) (= c1 c2)(= c2 c3) (= c3 c))
      (set! jackpot-win #t)
    )
  )
  )
  )
  )
  )
  )
  )
  )
    (set! colorcard #f)
  )

                                                                                                                                        ;DRAW CARDS
(when (and (= on-table? #t)(not (cpad-hold? 0 down)))
  (when (= jcard1 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jcard1s
    jcard1i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 400 240 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= jcard2 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jcard2s
    jcard2i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 420 240 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= jcard3 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jcard3s
    jcard3i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 440 240 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= jcard4 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jcard4s
    jcard4i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 460 240 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )

  (when (= dcard1 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str dcard1s
    dcard1i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 140 60 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= dcard2 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str dcard2s
    dcard2i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 160 60 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= dcard3 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str dcard3s
    dcard3i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 180 60 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )
  (when (= dcard4 #t)
    (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str dcard4s
    dcard4i
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 200 60 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
  )


(when (= jackpotbaby #t)
  (+! jackpotbabytime 1)
  (let ((c (rand-vu-int-range 1 5)))
    (when (= c 1)
      (set! jackpotcolors "<COLOR_RED>~s")
    )
    (when (= c 2)
      (set! jackpotcolors "<COLOR_BLUE>~s")
    )
    (when (= c 3)
      (set! jackpotcolors "<COLOR_GREEN>~s")
    )
    (when (= c 4)
      (set! jackpotcolors "<COLOR_YELLOW>~s")
    )
    (when (= c 5)
      (set! jackpotcolors "<COLOR_WHITE>~s")
    )
    (set! jackpot-string "< JAKPOT! <")
  )

  (clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str jackpotcolors
    jackpot-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      
      
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 225 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
    (when (= jackpotbabytime 500)
      (set! jackpotbabytime 0)
      (set! jackpotbaby #f)
    )
  )
)
)














;hud-menu (this is very inefficient and long. Not worth to add any options if you're not me.)
;---------------------------------------------------------

(when *target*
(when (= menu-activate #t)

;menu-update
;---------------------------------------Rapid Fire Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= rapid-fire-option #t)(= in-menu #t)(= menu-slot 0)(= sub-menu-slot 0))
    (set! gun-mod-string "Rapid Fire")
    (set! mod-string "Rapid Fire")
  )
    (when (and (= menu-pressed? #f)(= rapid-fire-option #f)(= in-menu #t)(= menu-slot 0)(= sub-menu-slot 0))
    (set! gun-mod-string "??????")
    (set! mod-string "??????")

    )
  ;---------------------------------------Rapid Fire sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "Rapid Fire!
")
    (print "Red
")
    (set! gun-string "Red Gun")
    
(when (cpad-pressed? 0 square)
    (set! rapid-fire-int 1)
    (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "Rapid Fire!
")
    (print "Yellow
")
      (set! gun-string "Yellow Gun")
(when (cpad-pressed? 0 square)
    (set! rapid-fire-int 2)
    (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "Rapid Fire!
")
    (print "Blue
")
      (set! gun-string "Blue Gun")
(when (cpad-pressed? 0 square)
    (set! rapid-fire-int 3)
    (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "Rapid Fire!
")
(print "Dark
")
     (set! gun-string "Peacemaker Gun")
(when (cpad-pressed? 0 square)
    (set! rapid-fire-int 4)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 1)(= rapid-fire-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "Rapid Fire!
")
    (print "None
")
          (set! gun-string "None")
            (when (cpad-pressed? 0 square)
                (set! rapid-fire-int 0)
            )
    )

;---------------------------------------Double Tap Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= double-tap-option #t)(= in-menu #t)(= menu-slot 1)(= sub-menu-slot 0))
    (set! gun-mod-string "Chanced Double Tap")
    (set! mod-string "Chanced Double Tap")
  )
    (when (and (= menu-pressed? #f)(= double-tap-option #f)(= in-menu #t)(= menu-slot 1)(= sub-menu-slot 0))
    (set! gun-mod-string "???????")
    (set! mod-string "???????")
  )



  ;---------------------------------------Double Tap sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "Double Tap!
")
    (print "Red
")
    (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! double-tap-int 2)
    (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "Double Tap!
")
    (print "Yellow
")
      (set! gun-string "Yellow Gun")
(when (cpad-pressed? 0 square)
    (set! double-tap-int 1)
    (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "Double Tap!
")
    (print "Blue
")
(set! gun-string "Blue Gun")
(when (cpad-pressed? 0 square)
    (set! double-tap-int 3)
    (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "Double Tap!
")
    (print "Dark
")
(set! gun-string "Peacemaker Gun")
(when (cpad-pressed? 0 square)
    (set! double-tap-int 4)
    (print "Set! dark
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 2)(= double-tap-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "Double Tap!
")
    (print "None
")
          (set! gun-string "None")
(when (cpad-pressed? 0 square)
    (set! double-tap-int 0)
)
    )
    
;---------------------------------------Guard Shot Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= guard-shot-option #t)(= in-menu #t)(= menu-slot 2)(= sub-menu-slot 0))
    (set! gun-mod-string "Guard Shot")
    (set! mod-string "Guard Shot")
  )
    (when (and (= menu-pressed? #f)(= guard-shot-option #f)(= in-menu #t)(= menu-slot 2)(= sub-menu-slot 0))
    (set! gun-mod-string "????????")
    (set! mod-string "????????")
  )



  ;---------------------------------------Guard Shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "Guard Shot!
")
    (print "Red
")
(set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
      (set! guard-shot-int 2)
      (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "Guard Shot!
")
    (print "Yellow
")
   (set! gun-string "Yellow Gun")
(when (cpad-pressed? 0 square)
      (set! guard-shot-int 1)
      (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "Guard Shot!
")
    (print "Blue
")
(set! gun-string "Blue Gun")
(when (cpad-pressed? 0 square)
      (set! guard-shot-int 3)
      (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "Guard Shot!
")
      (print "Dark
")
    (set! gun-string "Peacemaker Gun")
(when (cpad-pressed? 0 square)
      (set! guard-shot-int 4)
      (print "Set! dark
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 3)(= guard-shot-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "Guard Shot!
")
    (print "None
")
          (set! gun-string "None")
(when (cpad-pressed? 0 square)
      (set! guard-shot-int 0)
)
    )
    
    ;---------------------------------------Guard Grenade Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= guard-grenade-option #t)(= in-menu #t)(= menu-slot 3)(= sub-menu-slot 0))
    (set! gun-mod-string "Boom Stick!")
    (set! mod-string "Boom Stick!")
  )
    (when (and (= menu-pressed? #f)(= guard-grenade-option #f)(= in-menu #t)(= menu-slot 3)(= sub-menu-slot 0))
    (set! gun-mod-string "?????????")
    (set! mod-string "?????????")
  )



  ;---------------------------------------Guard Grenade sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 0))
      (set! gun-string "Red Gun")
    )
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 1))
      (set! gun-string "Yellow Gun")
    )
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 2))
      (set! gun-string "Blue Gun")
    )
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 3))
          (set! gun-string "Peacemaker Gun")
    )
    (when (and (= menu-pressed? #t)(= weapon-id 4)(= guard-grenade-option #t)(= in-menu #t)(= sub-menu-slot 4))
          (set! gun-string "None")
    )





    ;---------------------------------------Legendary Random Shot Main-----------------------------------------------------------
  (when (and (= menu-pressed? #f)(= leg-random-shot #t)(= in-menu #t)(= menu-slot 4)(= sub-menu-slot 0))
    (set! gun-mod-string "| LEGENDARY Random Shot!")
    (set! mod-string "| LEGENDARY Random Shot!")
  )
    (when (and (= menu-pressed? #f)(= leg-random-shot #f)(= in-menu #t)(= menu-slot 4)(= sub-menu-slot 0))
    (set! gun-mod-string "??????????")
    (set! mod-string "??????????")
  )



  ;---------------------------------------Legendary Random Shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "LEGENDARY! Random shot!
")
    (print "Red
")
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! leg-random-int 2)
    (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "LEGENDARY! Random shot!
")
    (print "Yellow
")
      (set! gun-string "Yellow Gun")
(when (cpad-pressed? 0 square)
    (set! leg-random-int 1)
    (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "| LEGENDARY! Random shot!
")
    (print "Blue
")
      (set! gun-string "Blue Gun")
(when (cpad-pressed? 0 square)
    (set! leg-random-int 3)
    (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "| LEGENDARY | Random shot!
")
    (print "Dark
")
    (set! gun-string "Peacemaker Gun")
(when (cpad-pressed? 0 square)
    (set! leg-random-int 4)
    (print "Set! dark
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 5)(= leg-random-shot #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "| LEGENDARY | Random shot!
")
    (print "None
")
          (set! gun-string "None")
(when (cpad-pressed? 0 square)
    (set! leg-random-int 0)
)
    )

  ;---------------------------------------Legendary pm-extra-shot-----------------------------------------------------------

  (when (and (= menu-pressed? #f)(= pm-extra-shot-option #t)(= in-menu #t)(= menu-slot 5)(= sub-menu-slot 0))
    (set! gun-mod-string "| LEGENDARY | Chanced Peacemaker Shot!")
    (set! mod-string "| LEGENDARY | Chanced Peacemaker Shot!")
  )
    (when (and (= menu-pressed? #f)(= pm-extra-shot-option #f)(= in-menu #t)(= menu-slot 5)(= sub-menu-slot 0))
    (when (= hell-mode-option #t)
      (set! gun-mod-string "?LOCKED? (normal only)")
    (set! mod-string "?LOCKED? (normal only)")
    )
    (when (= hell-mode-option #f)
      (set! gun-mod-string "???????????")
    (set! mod-string "???????????")
    )
  )



  ;---------------------------------------Legendary pm-extra-shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 0))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "Red
")
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! pm-extra-shot-int 2)
    (print "Set! red
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 1))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "Yellow
")
      (set! gun-string "Yellow Gun")
    (when (cpad-pressed? 0 square)
    (set! pm-extra-shot-int 1)
    (print "Set! yellow
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 2))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "Blue
")
      (set! gun-string "Blue Gun")
   (when (cpad-pressed? 0 square)
    (set! pm-extra-shot-int 3)
    (print "Set! blue
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 3))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "Dark
")
          (set! gun-string "Peacemaker Gun")
    (when (cpad-pressed? 0 square)
    (set! pm-extra-shot-int 4)
    (print "Set! dark
")
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 6)(= pm-extra-shot-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "None
")
          (set! gun-string "None")
    (when (cpad-pressed? 0 square)
    (set! pm-extra-shot-int 0)
)
    )
      ;---------------------------------------mag bag main-----------------------------------------------------------

  (when (and (= menu-pressed? #f)(= mag-bag-option #t)(= in-menu #t)(= menu-slot 6)(= sub-menu-slot 0))
    (set! gun-mod-string "Mag Bag!")
    (set! mod-string "Mag Bag!")
  )
    (when (and (= menu-pressed? #f)(= mag-bag-option #f)(= in-menu #t)(= menu-slot 6)(= sub-menu-slot 0))
    (set! gun-mod-string "????????????")
    (set! mod-string "????????????")
  )


      ;---------------------------------------mag bag sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 0))
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! mag-bag-int 2)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 1))
      (set! gun-string "Yellow Gun")
    (when (cpad-pressed? 0 square)
    (set! mag-bag-int 1)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 2))
      (set! gun-string "Blue Gun")
   (when (cpad-pressed? 0 square)
    (set! mag-bag-int 3)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 3))
          (set! gun-string "Peacemaker Gun")
    (when (cpad-pressed? 0 square)
    (set! mag-bag-int 4)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 7)(= mag-bag-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "| LEGENDARY | Chanced Peacemaker Shot!
")
    (print "None
")
          (set! gun-string "None")
    (when (cpad-pressed? 0 square)
    (set! mag-bag-int 0)
)
    )
    
      ;---------------------------------------mehrunes shot main-----------------------------------------------------------

  (when (and (= menu-pressed? #f)(= mehrunes-shot-option #t)(= in-menu #t)(= menu-slot 7)(= sub-menu-slot 0))
    (set! gun-mod-string "| LEGENDARY | Mehrunes Shot!")
    (set! mod-string "| LEGENDARY | Mehrunes Shot!")
  )
    (when (and (= menu-pressed? #f)(= mehrunes-shot-option #f)(= in-menu #t)(= menu-slot 7)(= sub-menu-slot 0))
    (set! gun-mod-string "?????????????")
    (set! mod-string "?????????????")
  )


      ;---------------------------------------mehrunes shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 0))
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! mehrunes-shot-int 2)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 1))
      (set! gun-string "Yellow Gun")
    (when (cpad-pressed? 0 square)
    (set! mehrunes-shot-int 1)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 2))
      (set! gun-string "Blue Gun")
   (when (cpad-pressed? 0 square)
    (set! mehrunes-shot-int 3)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 3))
          (set! gun-string "Peacemaker Gun")
    (when (cpad-pressed? 0 square)
    (set! mehrunes-shot-int 4)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 8)(= mehrunes-shot-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "None
")
          (set! gun-string "None")
    (when (cpad-pressed? 0 square)
    (set! mehrunes-shot-int 0)
)
    )
    
      ;---------------------------------------blast shot main-----------------------------------------------------------

  (when (and (= menu-pressed? #f)(= blast-shot-option #t)(= in-menu #t)(= menu-slot 8)(= sub-menu-slot 0))
    (set! gun-mod-string "| LEGENDARY | Blast Shot!")
    (set! mod-string "| LEGENDARY | Blast Shot!")
  )
    (when (and (= menu-pressed? #f)(= blast-shot-option #f)(= in-menu #t)(= menu-slot 8)(= sub-menu-slot 0))
    (when (= hell-mode-option #f)
      (set! gun-mod-string "?LOCKED? (heromode only)")
    (set! mod-string "?LOCKED? (heromode only)")
    )
    (when (= hell-mode-option #t)
      (set! gun-mod-string "???????????")
    (set! mod-string "???????????")
    )
  )


      ;---------------------------------------blast shot sub-----------------------------------------------------------
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 0))
      (set! gun-string "Red Gun")
(when (cpad-pressed? 0 square)
    (set! blast-shot-int 2)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 1))
      (set! gun-string "Yellow Gun")
    (when (cpad-pressed? 0 square)
    (set! blast-shot-int 1)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 2))
      (set! gun-string "Blue Gun")
   (when (cpad-pressed? 0 square)
    (set! blast-shot-int 3)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 3))
          (set! gun-string "Peacemaker Gun")
    (when (cpad-pressed? 0 square)
    (set! blast-shot-int 4)
)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 9)(= blast-shot-option #t)(= in-menu #t)(= sub-menu-slot 4))
    (print "None
")
          (set! gun-string "None")
    (when (cpad-pressed? 0 square)
    (set! blast-shot-int 0)
)
    )
  ;---------------------------------------Missing Gun Mod-----------------------------------------------------------
  (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 0))
    (set! gun-mod-string "You have not unlocked this weapon mod yet")
    (set! mod-string "You have not unlocked this weapon mod yet")
  (set! menu-pressed? #f)
    (set! menu-slot 0)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 1))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "You have not unlocked this weapon mod yet")
    (set! mod-string "You have not unlocked this weapon mod yet")
  (set! menu-pressed? #f)
    (set! menu-slot 0)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 2))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "You have not unlocked this weapon mod yet")
    (set! mod-string "You have not unlocked this weapon mod yet")
  (set! menu-pressed? #f)
    (set! menu-slot 0)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 3))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "You have not unlocked this weapon mod yet")
    (set! mod-string "You have not unlocked this weapon mod yet")
  (set! menu-pressed? #f)
    (set! menu-slot 0)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #t)(= weapon-id 99)(= in-menu #t)(= sub-menu-slot 4))
    (print "You have not unlocked this weapon mod.
")
(set! gun-mod-string "You have not unlocked this weapon mod yet")
    (set! mod-string "You have not unlocked this weapon mod yet")
  (set! menu-pressed? #f)
    (set! menu-slot 0)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)
    )

  (set! menu-activate #f)
)


(when (= camera-locked #t) ;lock camera
  (set! (-> *target* cam-user-mode) 'look-around)
  (send-event *target* 'draw #f)
  (set-setting-by-param *setting-control* 'mode-name 'cam-eye 0 0)
  (persist-with-delay *setting-control* 'gun (seconds 0.5) 'gun #f 0.0 0)
  (process-grab? *target* #f)
)



;controls
(when (and (= weapon-mod-toggle #t)(= (paused?) #f)(= in-menu #t)(= in-granger? #f)(cpad-pressed? 0 triangle)) ;exit virtual menu
  (print "Exited Menu
")
    (set! camera-locked #f)
    (remove-setting-by-arg0 *setting-control* 'mode-name)
    (set! in-menu #f)
    (set! menu-pressed? #f)
    (set! wait-start #t)
    (set! pause-menu-blocked? #f)
    (set! string-printed? #f)
    (sound-play "gun-putaway")
)

(when (= wait-start #t)
  (+! wait-frame 1)
  (when (> wait-frame 5)
    (set! wait-start #f)
    (set! wait-frame 0)
    (set! weapon-id 0)
    (send-event *target* 'draw #t)
    (process-release? *target*)
  )
)





(when (and (not *scene-player*)(!= (-> *target* fact health) 0.0))
  (when (and (= weapon-mod-toggle #t)(!= (-> (level-get-target-inside *level*) name) 'hiphog)(= in-granger? #f)(= in-menu #f)(= (paused?) #f)(cpad-pressed? 0 r3)) ;startup virtual menu
    (set! menu-activate #t)
    (set! in-menu #t)
    (set! sub-menu-slot 0)
    (set! menu-slot 0)
    (set! menu-pressed? #f)
    (set! string-printed? #t)
    (set! pause-menu-blocked? #t)
    (sound-play "gun-takeout")
    (print "Entered Menu: 
  CONTROLS:
  X: Select
  SQUARE: Attach gun mod
  TRIANGLE: Exit Menu
  LEFT/RIGHT: Browse
  ")
  (set! camera-locked #t)
  )
)


(when (= weapon-mod-toggle #t)
(when (= gm-start #t)
  (+! gm-frame 1)
  (when (= gm-frame 300)
    (set! recieved-gm #f)
    (set! gm-frame 0)
    (set! gm-start #f)
  )
)
(when (= gm-start2 #t)
  (+! gm-frame2 1)
  (when (= gm-frame2 300)
    (set! recieved-gm2 #f)
    (set! gm-frame2 0)
    (set! gm-start2 #f)
  )
)
(when (= gm-start3 #t)
  (+! gm-frame3 1)
  (when (= gm-frame3 300)
    (set! recieved-gm3 #f)
    (set! gm-frame3 0)
    (set! gm-start3 #f)
  )
)
(when (= gm-start4 #t)
  (+! gm-frame4 1)
  (when (= gm-frame4 300)
    (set! recieved-gm4 #f)
    (set! gm-frame4 0)
    (set! gm-start4 #f)
  )
)
(when (= gm-start5 #t)
  (+! gm-frame5 1)
  (when (= gm-frame5 300)
    (set! recieved-gm5 #f)
    (set! gm-frame5 0)
    (set! gm-start5 #f)
  )
)
(when (= gm-start6 #t)
  (+! gm-frame6 1)
  (when (= gm-frame6 300)
    (set! recieved-gm6 #f)
    (set! gm-frame6 0)
    (set! gm-start6 #f)
  )
)
(when (= gm-start7 #t)
  (+! gm-frame7 1)
  (when (= gm-frame7 300)
    (set! recieved-gm7 #f)
    (set! gm-frame7 0)
    (set! gm-start7 #f)
  )
)
(when (= gm-start8 #t)
  (+! gm-frame8 1)
  (when (= gm-frame8 300)
    (set! recieved-gm8 #f)
    (set! gm-frame8 0)
    (set! gm-start8 #f)
  )
)
(when (= gm-start9 #t)
  (+! gm-frame9 1)
  (when (= gm-frame9 600)
    (set! recieved-gm9 #f)
    (set! gm-frame9 0)
    (set! gm-start9 #f)
  )
)
(when (and (= in-menu #f)(= recieved-gm #t)) ;looks for recieving a gun mod to alert for weapon id 1
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_GREEN>~S"
    recieved-gm-s ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 245 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start #t)
)

(when (and (= in-menu #f)(= recieved-gm2 #t)) ;looks for recieving a gun mod to alert for weapon id 2
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_GREEN>~S"
    recieved-gm-s2 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 225 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start2 #t)
)

(when (and (= in-menu #f)(= recieved-gm3 #t)) ;looks for recieving a gun mod to alert for weapon id 3
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_GREEN>~S"
    recieved-gm-s3 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 205 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start3 #t)
)

(when (and (= in-menu #f)(= recieved-gm4 #t)) ;looks for recieving a gun mod to alert for weapon id 4
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_GREEN>~S"
    recieved-gm-s4 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 185 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start4 #t)
)

(when (and (= in-menu #f)(= recieved-gm5 #t)) ;looks for recieving a gun mod to alert for weapon id 5
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW> | LEGENDARY <COLOR_WHITE>Recieved Gun Mod:~%<COLOR_RED>~S"
    recieved-gm-s5 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 165 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start5 #t)
)

(when (and (= in-menu #f)(= recieved-gm6 #t)) ;looks for recieving a gun mod to alert for weapon id 6
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW> | LEGENDARY | <COLOR_WHITE>Recieved Gun Mod:~%<COLOR_RED>~S"
    recieved-gm-s6 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 165 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start6 #t)
)

(when (and (= in-menu #f)(= recieved-gm7 #t)) ;looks for recieving a gun mod to alert for weapon id 7
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Recieved Gun Mod:~%<COLOR_BLUE>~S"
    recieved-gm-s7 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 145 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start7 #t)
)

(when (and (= in-menu #f)(= recieved-gm8 #t)) ;looks for recieving a gun mod to alert for weapon id 8
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW> | LEGENDARY | <COLOR_WHITE>Recieved Gun Mod:~%<COLOR_BLUE>~S"
    recieved-gm-s8 ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 125 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start8 #t)
)

(when (and (= in-menu #f)(= recieved-gm9 #t)) ;looks for recieving mushroom movies secret.
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>UPDATED GUN MOD MENU SETTINGS
~%<COLOR_BLUE>Mushroom Movies secret unlocked!"
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 115 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! gm-start9 #t)
)

)
(when (and (= menu-pressed? #f)(= string-printed? #t)) ;draws the gunmod section
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>GUN MODS:~%<COLOR_GREEN>~S"
    gun-mod-string ;the names of weapon mods
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 245 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= menu-pressed? #t)(= string-printed? #t)) ;draws the sub menu for gun mod
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>Attach <COLOR_GREEN>~S <COLOR_WHITE>to:~%<COLOR_RED>~S"
    mod-string ;the name of the mod
    gun-string ;the name of the colored gun
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 245 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= menu-pressed? #t)(cpad-hold? 0 square)) ;draws the sub menu yellow for when you attach a mod
(clear matt-str)
    (clear *pc-encoded-matt-str*)
  (format matt-str "<COLOR_WHITE>Attach <COLOR_GREEN>~S <COLOR_WHITE>to:~%<COLOR_YELLOW>~S"
    mod-string
    gun-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 245 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (= in-menu #t) ;displays modifier
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>CURRENT MODIFIER:~%<COLOR_RED>~S"
    modifier-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 0 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (not (cpad-hold? 0 l3))(!= (-> *game-info* fuel) 10.0)(= in-menu #t)(= mod-reroll #f)) ;displays control menu
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>CONTROLS:~%LEFT/RIGHT: Browse~%X: Select~%SQUARE: Attach Gun Mod~%CIRCLE: Back to Mods~%L3: Reroll Modifier (-25 gems)~%TRIANGLE: Exit Menu"
    modifier-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! press-frame 0)
)

(when (and (= in-menu #t)(!= (-> *game-info* fuel) 10.0)(cpad-hold? 0 l3)) ;displays control menu when you do mod reroll
(clear matt-str)
    (clear *pc-encoded-matt-str*)
   (format matt-str "<COLOR_WHITE>CONTROLS:~%LEFT/RIGHT: Browse~%X: Select~%SQUARE: Attach Gun Mod~%CIRCLE: Back to Mods~%L3: <COLOR_RED>(PRESS AND HOLD):~S~%<COLOR_WHITE>TRIANGLE: Exit Menu"
    mod-reroll-string
    )

    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (when (< (-> *game-info* gem) 10.0)
        (set! mod-reroll-string "NOT ENOUGH GEMS")
        )
        (when (>= (-> *game-info* gem) 10.0)
        (+! press-frame 1)
        )
)

(when (and (= (-> *game-info* fuel) 10.0)(= in-menu #t)) ;displays control menu but in heromode. Removes mod-reroll
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>CONTROLS:~%LEFT/RIGHT: Browse~%X: Select~%SQUARE: Attach Gun Mod~%CIRCLE: Back to Mods~%<COLOR_RED>Down: HellMode Info~%<COLOR_WHITE>TRIANGLE: Exit Menu"
    modifier-string
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 30 0.0 (font-color default) (font-flags right shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (set! press-frame 0)
)

(when (and (= in-menu #t)(= tp-fb-win #f)(!= (-> *game-info* task-deaths) 4)(= (-> *game-info* fuel) 10.0)(cpad-hold? 0 down)) ;draws the info screen
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>HELL MODE INFO:
    ~%
    ~%<COLOR_YELLOW>All modifiers are active:
    ~%<COLOR_RED>TP-FB Challenge
    ~%<COLOR_WHITE>Upon death, jak teleports to the final boss, but its extremely unfair
    ~%Beat the boss to gain a powerful weapon mod (more powerful in hero-mode)
    ~%<COLOR_RED>Peacemaker Ability / 1 Hit Boss
    ~%<COLOR_WHITE>At all times, have a chance to fire 100 peacemaker shots
    ~%but you must fight every boss with 1 HP
    ~%<COLOR_RED>Boosted Hov Speed / Boosted Enemy HP
    ~%<COLOR_WHITE>Hoverboard is the fast
    ~%but enemies have X5 HP (does not apply in traffic)
    ~%<COLOR_RED>Chanced Max Eco collect / Traffic Max alert
    ~%<COLOR_WHITE>Any eco pickup can fill up the rest of your meter
    ~%but any time you anger the guards, theyre alerted to max level
    ~%<COLOR_RED>Chanced Trip / Gain 25 Metalheads
    ~%<COLOR_WHITE>Can trip from shooting, rolling, punching, jumping, or twirling
    ~%but every time this happens, gain 25 metalheads (on-cooldown)
    ~%<COLOR_RED>On Hit Target Explode / GunGame Ammo
    ~%<COLOR_WHITE>Entering the gun course refills all of your ammo to maximum
    ~%but Jak has a bomb strapped inside of him, any hits or bonks could set it off
    "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= in-menu #t)(= tp-fb-win #f)(= (-> *game-info* task-deaths) 4)(= (-> *game-info* fuel) 10.0)(cpad-hold? 0 down)) ;draws the info screen
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>HELL MODE INFO:
    ~%<COLOR_PINK>END OF ALL WORLDS ENSURED.
    ~%<COLOR_YELLOW>All modifiers are active:
    ~%<COLOR_RED>TP-FB Challenge
    ~%<COLOR_WHITE>Upon death, jak teleports to the final boss, but its extremely unfair
    ~%Beat the boss to gain a powerful weapon mod (more powerful in hero-mode)
    ~%<COLOR_RED>Peacemaker Ability / 1 Hit Boss
    ~%<COLOR_WHITE>At all times, have a chance to fire 100 peacemaker shots
    ~%but you must fight every boss with 1 HP
    ~%<COLOR_RED>Boosted Hov Speed / Boosted Enemy HP
    ~%<COLOR_WHITE>Hoverboard is the fast
    ~%but enemies have X5 HP (does not apply in traffic)
    ~%<COLOR_RED>Chanced Max Eco collect / Traffic Max alert
    ~%<COLOR_WHITE>Any eco pickup can fill up the rest of your meter
    ~%but any time you anger the guards, theyre alerted to max level
    ~%<COLOR_RED>Chanced Trip / Gain 25 Metalheads
    ~%<COLOR_WHITE>Can trip from shooting, rolling, punching, jumping, or twirling
    ~%but every time this happens, gain 25 metalheads (on-cooldown)
    ~%<COLOR_RED>On Hit Target Explode / GunGame Ammo
    ~%<COLOR_WHITE>Entering the gun course refills all of your ammo to maximum
    ~%but Jak has a bomb strapped inside of him, any hits or bonks could set it off
    "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(= tp-fb-win #t)(!= (-> *game-info* task-deaths) 4)(= (-> *game-info* fuel) 10.0)(cpad-hold? 0 down)) ;draws the info screen
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>HELL MODE INFO:
    ~%
    ~%<COLOR_YELLOW>All modifiers are active:
    ~%<COLOR_GREEN>On-Death TP-FB Challenge (DISABLED)
    ~%<COLOR_YELLOW>You beat TP-FB in Hero Mode! I'm actually impressed
    ~%Blast shot has been rewarded in your inventory. Congrats!
    ~%<COLOR_RED>Peacemaker Ability / 1 Hit Boss
    ~%<COLOR_WHITE>At all times, have a chance to fire 100 peacemaker shots
    ~%but you must fight every boss with 1 HP
    ~%<COLOR_RED>Boosted Hov Speed / Boosted Enemy HP
    ~%<COLOR_WHITE>Hoverboard is the fast
    ~%but enemies have X5 HP (does not apply in traffic)
    ~%<COLOR_RED>Chanced Max Eco collect / Traffic Max alert
    ~%<COLOR_WHITE>Any eco pickup can fill up the rest of your meter
    ~%but any time you anger the guards, theyre alerted to max level
    ~%<COLOR_RED>Chanced Trip / Gain 25 Metalheads
    ~%<COLOR_WHITE>Can trip from shooting, rolling, punching, jumping, or twirling
    ~%but every time this happens, gain 25 metalheads (on-cooldown)
    ~%<COLOR_RED>On Hit Target Explode / GunGame Ammo
    ~%<COLOR_WHITE>Entering the gun course refills all of your ammo to maximum
    ~%but Jak has a bomb strapped inside of him, any hits or bonks could set it off
    "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= in-menu #t)(= tp-fb-win #t)(= (-> *game-info* task-deaths) 4)(= (-> *game-info* fuel) 10.0)(cpad-hold? 0 down)) ;draws the info screen
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "
    <COLOR_WHITE>HELL MODE INFO:
    ~%<COLOR_PINK>END OF ALL WORLDS ENSURED.
    ~%<COLOR_YELLOW>All modifiers are active:
    ~%<COLOR_GREEN>On-Death TP-FB Challenge (DISABLED)
    ~%<COLOR_YELLOW>You beat TP-FB in Hero Mode! I'm actually impressed
    ~%Blast shot has been rewarded in your inventory. Congrats!
    ~%<COLOR_RED>Peacemaker Ability / 1 Hit Boss
    ~%<COLOR_WHITE>At all times, have a chance to fire 100 peacemaker shots
    ~%but you must fight every boss with 1 HP
    ~%<COLOR_RED>Boosted Hov Speed / Boosted Enemy HP
    ~%<COLOR_WHITE>Hoverboard is the fast
    ~%but enemies have X5 HP (does not apply in traffic)
    ~%<COLOR_RED>Chanced Max Eco collect / Traffic Max alert
    ~%<COLOR_WHITE>Any eco pickup can fill up the rest of your meter
    ~%but any time you anger the guards, theyre alerted to max level
    ~%<COLOR_RED>Chanced Trip / Gain 25 Metalheads
    ~%<COLOR_WHITE>Can trip from shooting, rolling, punching, jumping, or twirling
    ~%but every time this happens, gain 25 metalheads (on-cooldown)
    ~%<COLOR_RED>On Hit Target Explode / GunGame Ammo
    ~%<COLOR_WHITE>Entering the gun course refills all of your ammo to maximum
    ~%but Jak has a bomb strapped inside of him, any hits or bonks could set it off
    "
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 0 1 0.0 (font-color default) (font-flags shadow kerning large))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= in-menu #t)(>= (-> *game-info* gem) 25.0))
(when (= press-frame 1)
    (set! mod-reroll-string "Re-Rolling")
  )
  (when (= press-frame 60)
    (set! mod-reroll-string "Re-Rolling.")
  )
  (when (= press-frame 120)
    (set! mod-reroll-string "Re-Rolling..")
  )
  (when (= press-frame 180)
    (set! mod-reroll-string "Re-Rolling...")
  )
    (when (= press-frame 240)
    (set! mod-reroll-string "Re-Rolling..!")
  )
      (when (= press-frame 300)
    (set! mod-reroll-string "Re-Rolling.!!")
  )
        (when (= press-frame 360)
    (set! mod-reroll-string "Re-Rolling!!!")
  )
  
  (when (= press-frame 390)
    (set! mod-reroll #t)
    (set! press-frame 0)
  )
)

(when (and (= mushie-unlocked? #t)(= done-it #f)(= in-menu #t)(= mushroom-movies #f)(not (cpad-hold? 0 r1)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_RED>Enable Mushroom Movies")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 100 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= mushie-unlocked? #t)(= done-it #f)(= in-menu #t)(= mushroom-movies #t)(not (cpad-hold? 0 r1)))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_GREEN>Disable Mushroom Movies")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 100 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (and (= mushie-unlocked? #t)(= done-it #f)(= in-menu #t)(cpad-hold? 0 r1))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_YELLOW>~S"
    disable-mms
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 100 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
        (+! disable-mm 1)
)
(when (and (= mushie-unlocked? #t)(= mushroom-movies #t)(= done-it #t)(= in-menu #t)(cpad-hold? 0 r1))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_GREEN>~S"
    disable-mms
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 100 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (and (= mushie-unlocked? #t)(= mushroom-movies #f)(= done-it #t)(= in-menu #t)(cpad-hold? 0 r1))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_WHITE>R1: <COLOR_RED>~S"
    disable-mms
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 100 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)
(when (= disable-mm 1)
  (set! disable-mms "(Press and Hold)")
)
(when (= disable-mm 3)
  (set! disable-mms "(Press and Hold.)")
)
(when (= disable-mm 6)
  (set! disable-mms "(Press and Hold..)")
)
(when (= disable-mm 9)
  (set! disable-mms "(Press and Hold...)")
)
(when (= disable-mm 12)
  (set! disable-mms "(Press and Hold..!)")
)
(when (= disable-mm 15)
  (set! disable-mms "(Press and Hold.!!)")
)
(when (= disable-mm 18)
  (set! disable-mms "(Press and Hold!!!)")
)
(when (and (= mushie-unlocked? #t)(= in-menu #t)(= done-it #f)(= disable-mm 20)(= mushroom-movies #t))
  (set! mushroom-movies #f)
  (set! disable-mm 0)
  (set! done-it #t)
  (set! disable-mms "Mushroom Movies Enabled.")
)
(when (and (= mushie-unlocked? #t)(= in-menu #t)(= done-it #f)(= disable-mm 20)(= mushroom-movies #f))
  (set! mushroom-movies #t)
  (set! disable-mm 0)
  (set! done-it #t)
  (set! disable-mms "Mushroom Movies Disabled.")
)

(when (and (cpad-hold? 0 r1)(= mushie-unlocked? #t)(= done-it #t)(= in-menu #t))
  (when (= mushroom-movies #t)
    (set! disable-mms "Mushroom Movies Enabled.")
  )
  (when (and (= mushie-unlocked? #t)(= mushroom-movies #f))
    (set! disable-mms "Mushroom Movies Disabled.")
  )
)
(when (and (not (cpad-hold? 0 r1))(= mushie-unlocked? #t)(= done-it #t)(= in-menu #t))
  (set! done-it #f)
)


(when (and (= (-> *game-info* task-deaths) 4)(= in-menu #t))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_PINK>END OF ALL WORLDS ENSURED")
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 120 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)

(when (= in-menu #t)
  (set! death-counter-int (-> *game-info* total-deaths))
  (clear matt-str)
    (clear *pc-encoded-matt-str*)
    (format matt-str "<COLOR_YELLOW>Death Counter: <COLOR_RED>~d"
    (the-as int (-> *game-info* total-deaths))
    )
    (pc-encode-utf8-string matt-str *pc-encoded-matt-str*)
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf)) (bucket-id debug-no-zbuf1))
      ;; reset bucket settings prior to drawing - font won't do this for us, and
      ;; draw-raw-image can sometimes mess them up. (intro sequence)
      (dma-buffer-add-gs-set-flusha buf (alpha-1 (new 'static 'gs-alpha :b #x1 :d #x1)) (tex1-1 (new 'static 'gs-tex1 :mmag #x1 :mmin #x1)))
      (let ((font-ctx (new 'stack 'font-context *font-default-matrix* 510 110 0.0 (font-color default) (font-flags shadow kerning large right))))
        (set! (-> font-ctx scale) 0.325)
        (draw-string-adv *pc-encoded-matt-str* buf font-ctx)))
)


(when (and (= in-menu #t)(= menu-slot 0)(= menu-pressed? #t)(cpad-pressed? 0 square)) ;Selected Gun Mod!
  (set! menu-activate #t)
  ;-------------------------rapid-fire-int--------------------------------
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 0))
    (set! rapid-fire-int 2)(sound-play "gun-takeout")
        
  )
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 1))
    (set! rapid-fire-int 1)(sound-play "gun-takeout")
  )
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 2))
    (set! rapid-fire-int 3)(sound-play "gun-takeout")
  )
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 3))
    (set! rapid-fire-int 4)(sound-play "gun-takeout")
  )
  (when (and (= rapid-fire-option #t)(= weapon-id 1)(= sub-menu-slot 4))
    (set! rapid-fire-int 0)(sound-play "gun-takeout")
  )
      ;-------------------------double-tap-int--------------------------------
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 0))
        (set! double-tap-int 2)(sound-play "gun-takeout")
  )
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 1))
    (set! double-tap-int 1)(sound-play "gun-takeout")
  )
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 2))
    (set! double-tap-int 3)(sound-play "gun-takeout")
  )
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 3))
    (set! double-tap-int 4)(sound-play "gun-takeout")
  )
  (when (and (= double-tap-option #t)(= weapon-id 2)(= sub-menu-slot 4))
    (set! double-tap-int 0)(sound-play "gun-takeout")
  )
      ;-------------------------guard-shot-int--------------------------------
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 0))
        (set! guard-shot-int 2)(sound-play "gun-takeout")
  )
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 1))
    (set! guard-shot-int 1)(sound-play "gun-takeout")
  )
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 2))
    (set! guard-shot-int 3)(sound-play "gun-takeout")
  )
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 3))
    (set! guard-shot-int 4)(sound-play "gun-takeout")
  )
  (when (and (= guard-shot-option #t)(= weapon-id 3)(= sub-menu-slot 4))
    (set! guard-shot-int 0)(sound-play "gun-takeout")
  )
;      -------------------------guard-grenade-int--------------------------------
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 0))
        (set! guard-grenade-int 2)(sound-play "gun-takeout")
  )
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 1))
    (set! guard-grenade-int 1)(sound-play "gun-takeout")
  )
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 2))
    (set! guard-grenade-int 3)(sound-play "gun-takeout")
  )
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 3))
    (set! guard-grenade-int 4)(sound-play "gun-takeout")
  )
  (when (and (= guard-grenade-option #t)(= weapon-id 4)(= sub-menu-slot 4))
    (set! guard-grenade-int 0)(sound-play "gun-takeout")
  )
  
      ;-------------------------rand-shot-int--------------------------------
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 0))
        (set! leg-random-int 2)(sound-play "gun-takeout")
  )
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 1))
    (set! leg-random-int 1)(sound-play "gun-takeout")
  )
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 2))
    (set! leg-random-int 3)(sound-play "gun-takeout")
  )
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 3))
    (set! leg-random-int 4)(sound-play "gun-takeout")
  )
  (when (and (= leg-random-shot #t)(= weapon-id 5)(= sub-menu-slot 4))
    (set! leg-random-int 0)(sound-play "gun-takeout")
  )
      ;-------------------------pm-extra-shot-int--------------------------------
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 0))
        (set! pm-extra-shot-int 2)(sound-play "gun-takeout")
  )
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 1))
    (set! pm-extra-shot-int 1)(sound-play "gun-takeout")
  )
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 2))
    (set! pm-extra-shot-int 3)(sound-play "gun-takeout")
  )
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 3))
    (set! pm-extra-shot-int 4)(sound-play "gun-takeout")
  )
  (when (and (= pm-extra-shot-option #t)(= weapon-id 6)(= sub-menu-slot 4))
    (set! pm-extra-shot-int 0)(sound-play "gun-takeout")
  )
        ;-------------------------mag-bag-int--------------------------------
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 0))
        (set! mag-bag-int 2)(sound-play "gun-takeout")
        (set! (-> *game-info* karma) 2.0)
  )
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 1))
    (set! mag-bag-int 1)(sound-play "gun-takeout")
    (set! (-> *game-info* karma) 1.0)
  )
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 2))
    (set! mag-bag-int 3)(sound-play "gun-takeout")
    (set! (-> *game-info* karma) 3.0)
  )
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 3))
    (set! mag-bag-int 4)(sound-play "gun-takeout")
    (set! (-> *game-info* karma) 4.0)
  )
  (when (and (= mag-bag-option #t)(= weapon-id 7)(= sub-menu-slot 4))
    (set! mag-bag-int 0)(sound-play "gun-takeout")
    (set! (-> *game-info* karma) 0.0)
  )
          ;-------------------------mehrunes-shot-int--------------------------------
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 0))
        (set! mehrunes-shot-int 2)(sound-play "gun-takeout")
  )
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 1))
    (set! mehrunes-shot-int 1)(sound-play "gun-takeout")
  )
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 2))
    (set! mehrunes-shot-int 3)(sound-play "gun-takeout")
  )
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 3))
    (set! mehrunes-shot-int 4)(sound-play "gun-takeout")
  )
  (when (and (= mehrunes-shot-option #t)(= weapon-id 8)(= sub-menu-slot 4))
    (set! mehrunes-shot-int 0)(sound-play "gun-takeout")
  )
          ;-------------------------blast-shot-int--------------------------------
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 0))
        (set! mehrunes-shot-int 2)(sound-play "gun-takeout")
  )
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 1))
    (set! blast-shot-int 1)(sound-play "gun-takeout")
  )
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 2))
    (set! blast-shot-int 3)(sound-play "gun-takeout")
  )
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 3))
    (set! blast-shot-int 4)(sound-play "gun-takeout")
  )
  (when (and (= blast-shot-option #t)(= weapon-id 9)(= sub-menu-slot 4))
    (set! blast-shot-int 0)(sound-play "gun-takeout")
  )
)

(when (and (= in-menu #t)(!= weapon-id 0)(= menu-pressed? #t)(cpad-pressed? 0 circle)) ;go back from color menu
    (set! menu-pressed? #f)
    (set! menu-slot 0)
    (set! sub-menu-slot 0)
    (set! weapon-id 0)
    (set! menu-activate #t)

  )

  (when (and (= in-menu #t)(cpad-pressed? 0 left))
    (when (= menu-pressed? #f)
      (-! menu-slot 1)
      (set! sub-menu-slot 0)
      (set! menu-activate #t)
    )
      (when (= menu-pressed? #t)
      (set! menu-slot 0)
      (-! sub-menu-slot 1)
      (set! menu-activate #t)
      )
    (when (and (= menu-pressed? #f) (< menu-slot 0)) ;max options for menu left
      (set! menu-slot 0)
      (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #f) (> sub-menu-slot 4)) ;max options for menu left
      (set! sub-menu-slot 0)
      (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #f) (< sub-menu-slot 0)) ;max options for menu left
      (set! sub-menu-slot 4)
      (set! menu-activate #t)
    )
  )

  (when (and (= in-menu #t)(cpad-pressed? 0 right))
    (when (= menu-pressed? #f)
      (+! menu-slot 1)
      (set! sub-menu-slot 0)
      (set! menu-activate #t)
    )
      (when (= menu-pressed? #t)
      (set! menu-slot 0)
      (+! sub-menu-slot 1)
      (set! menu-activate #t)

     (when (and (= menu-pressed? #f) (>= menu-slot 8)) ;max options for menu left
      (set! menu-slot 8)
      (set! menu-activate #t)
    )
    (when (and (= menu-pressed? #f) (> sub-menu-slot 4)) ;max options for menu right
      (set! sub-menu-slot 0)
      (set! menu-activate #t)
    )
    )

  )
    (when (and (= menu-pressed? #f)(= weapon-id 0)(= in-menu #t)(cpad-pressed? 0 x))
      ;looks for when you have transitioned into selecting color for the weapon mod
      (set! menu-pressed? #t)
      (when (and (= rapid-fire-option #t)(= menu-slot 0)(= sub-menu-slot 0))
        (set! weapon-id 1)
      )
      (when (and (= double-tap-option #t)(= menu-slot 1)(= sub-menu-slot 0))
        (set! weapon-id 2)
      )
      (when (and (= guard-shot-option #t)(= menu-slot 2)(= sub-menu-slot 0))
        (set! weapon-id 3)
      )
      (when (and (= guard-grenade-option #t)(= menu-slot 3)(= sub-menu-slot 0))
        (set! weapon-id 4)
      )
      (when (and (= leg-random-shot #t)(= menu-slot 4)(= sub-menu-slot 0))
        (set! weapon-id 5)
      )
      (when (and (= pm-extra-shot-option #t)(= menu-slot 5)(= sub-menu-slot 0))
        (set! weapon-id 6)
      )
      (when (and (= mag-bag-option #t)(= menu-slot 6)(= sub-menu-slot 0))
        (set! weapon-id 7)
      )
      (when (and (= mehrunes-shot-option #t)(= menu-slot 7)(= sub-menu-slot 0))
        (set! weapon-id 8)
      )
      (when (and (= blast-shot-option #t)(= menu-slot 8)(= sub-menu-slot 0))
        (set! weapon-id 9)
      )
      (when (and (= rapid-fire-option #f)(= menu-slot 0)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= double-tap-option #f)(= menu-slot 1)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= guard-shot-option #f)(= menu-slot 2)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= guard-grenade-option #f)(= menu-slot 3)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= leg-random-shot #f)(= menu-slot 4)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= pm-extra-shot-option #f)(= menu-slot 5)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= mag-bag-option #f)(= menu-slot 6)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (when (and (= mehrunes-shot-option #f)(= menu-slot 7)(= sub-menu-slot 0))
        (set! weapon-id 99)
      )
      (set! menu-activate #t)
    )

)

(when (and *scene-player* (= in-menu #t)) ;if you're in a cutscene while youre in the menu, it disables it.
    (set! camera-locked #f)
    (set! (-> *target* cam-user-mode) 'normal)
    (set-setting-by-param *setting-control* 'mode-name 'cam-string 0 0)
    (set! in-menu #f)
    (set! menu-pressed? #f)
    (set! wait-start #t)
    (set! string-printed? #f)
)































  (cond
    ((update! *minimap*)
     (logior! (-> this flags) (hud-flags show))
     (let ((t9-1 (method-of-type hud update-values)))
       (t9-1 this)
       )
     )
    (else
      (send-event this 'force-hide)
      )
    )
  (when (not (paused?))
    (let ((v1-10 8))
      (if (and (< (-> this values 1 target) 270) (< 270 (+ (-> this values 1 target) v1-10)))
          (set! (-> this values 1 target) 270)
          )
      (if (or (-> *game-info* wanted-flash) (!= (-> this values 1 target) 270))
          (set! (-> this values 1 target) (mod (+ (-> this values 1 target) v1-10) 360))
          )
      )
    )
  0
  (none)
  )

(defmethod init-callback hud-map ((this hud-map))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-lower-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :page #x67a)))
  (set! (-> this sprites 0 scale-x) 1.2)
  (set! (-> this sprites 0 scale-y) 1.2)
  (set! (-> this sprites 0 flags) (the-as uint 4))
  (set! (-> this sprites 0 pos z) #xffff00)
  (set! (-> this sprites 1 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x6 :page #x67a)))
  (set! (-> this sprites 1 scale-x) 0.85)
  (set! (-> this sprites 1 scale-y) 0.85)
  (set! (-> this sprites 1 flags) (the-as uint 4))
  (set! (-> this sprites 1 pos z) #xffff00)
  (set! (-> this values 0 current) 0)
  (update! *minimap*)
  0
  (none)
  )

(defmethod draw hud-health ((this hud-health))
  (set-hud-piece-position!
    (-> this sprites 8)
    (the int (+ (* -130.0 (-> this offset)) (if (= (-> *setting-control* user-default aspect-ratio) 'aspect4x3)
                                                20.0
                                                30.0
                                                )
                )
         )
    (the int (+ 306.0 (* 130.0 (-> this offset))))
    )
  (set-as-offset-from! (-> this sprites 9) (the-as vector4w (-> this sprites 8)) 40 0)
  (set-as-offset-from! (-> this sprites 10) (the-as vector4w (-> this sprites 8)) 0 40)
  (set-as-offset-from! (-> this sprites 11) (the-as vector4w (-> this sprites 8)) 40 40)
  (set-as-offset-from! (-> this sprites 12) (the-as vector4w (-> this sprites 8)) 2 32)
  (set-as-offset-from! (-> this sprites 13) (the-as vector4w (-> this sprites 8)) 7 60)
  (set-as-offset-from! (-> this sprites 14) (the-as vector4w (-> this sprites 8)) 40 60)
  (set-as-offset-from! (-> this sprites 15) (the-as vector4w (-> this sprites 8)) 63 32)
  (set-as-offset-from! (-> this sprites 16) (the-as vector4w (-> this sprites 8)) 63 16)
  (set-as-offset-from! (-> this sprites 17) (the-as vector4w (-> this sprites 8)) 41 4)
  (set-as-offset-from! (-> this sprites 18) (the-as vector4w (-> this sprites 8)) 6 4)
  (set-as-offset-from! (-> this sprites 19) (the-as vector4w (-> this sprites 8)) 2 17)
  (set-as-offset-from! (the-as hud-sprite (-> this sprites)) (the-as vector4w (-> this sprites 8)) 40 40)
  (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites 8)) 40 40)
  (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites 8)) 40 40)
  (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites 8)) 40 40)
  (set-as-offset-from! (-> this sprites 4) (the-as vector4w (-> this sprites 8)) 40 40)
  (set-as-offset-from! (-> this sprites 5) (the-as vector4w (-> this sprites 8)) 40 40)
  (set-as-offset-from! (-> this sprites 6) (the-as vector4w (-> this sprites 8)) 40 40)
  (set-as-offset-from! (-> this sprites 7) (the-as vector4w (-> this sprites 8)) 40 40)
  (set-as-offset-from! (-> this sprites 21) (the-as vector4w (-> this sprites 8)) 25 25)
  (let ((v1-12
          (+ (the int (* 127.0 (sin (* 182.04445 (the float (* (-> *display* game-clock frame-counter) 2)))))) 127)
          )
        )
    (set! (-> this sprites 1 color x) v1-12)
    (set! (-> this sprites 1 color y) v1-12)
    (set! (-> this sprites 1 color z) v1-12)
    )
  (set! (-> this sprites 3 color x) (-> this sprites 1 color x))
  (set! (-> this sprites 5 color x) (-> this sprites 1 color x))
  (set! (-> this sprites 7 color x) (-> this sprites 1 color x))
  (set! (-> this sprites 3 color y) (-> this sprites 1 color y))
  (set! (-> this sprites 5 color y) (-> this sprites 1 color y))
  (set! (-> this sprites 7 color y) (-> this sprites 1 color y))
  (set! (-> this sprites 3 color z) (-> this sprites 1 color z))
  (set! (-> this sprites 5 color z) (-> this sprites 1 color z))
  (set! (-> this sprites 7 color z) (-> this sprites 1 color z))
  (let ((f30-1 (the float (-> this values 2 current))))
    (if (= f30-1 100.0)
        (set! (-> this sprites 21 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1f :page #x67a)))
        (set! (-> this sprites 21 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x3e :page #x67a)))
        )
    (cond
      ((< 75.0 f30-1)
       (set! (-> this sprites 0 angle) (* 182.04445 (- 180.0 (* 3.6 (+ -75.0 f30-1)))))
       (set! (-> this sprites 2 angle) 32768.0)
       (set! (-> this sprites 4 angle) 49152.0)
       (set! (-> this sprites 6 angle) 0.0)
       )
      ((< 50.0 f30-1)
       (set! (-> this sprites 0 angle) 32768.0)
       (set! (-> this sprites 2 angle) (* 182.04445 (- 270.0 (* 3.6 (+ -50.0 f30-1)))))
       (set! (-> this sprites 4 angle) 49152.0)
       (set! (-> this sprites 6 angle) 0.0)
       )
      ((< 25.0 f30-1)
       (set! (-> this sprites 0 angle) 32768.0)
       (set! (-> this sprites 2 angle) 49152.0)
       (set! (-> this sprites 4 angle) (* 182.04445 (- (* 3.6 (+ -25.0 f30-1)))))
       (set! (-> this sprites 6 angle) 0.0)
       )
      (else
        (set! (-> this sprites 0 angle) 32768.0)
        (set! (-> this sprites 2 angle) 49152.0)
        (set! (-> this sprites 4 angle) 0.0)
        (set! (-> this sprites 6 angle) (* 182.04445 (- 90.0 (* 3.6 f30-1))))
        )
      )
    )
  (let ((v1-55 (-> this values 0 current))
        (a0-25 12)
        )
    (while (< a0-25 20)
      (set! (-> this sprites a0-25 scale-x) (if (> v1-55 0)
                                                1.0
                                                0.0
                                                )
            )
      (+! a0-25 1)
      (+! v1-55 -10)
      )
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-health ((this hud-health))
  (set! (-> this values 0 target) (the int (* 10.0 (-> *target* fact health))))
  (set! (-> this values 1 target) (the-as int (-> *target* fact health-pickup-time)))
  (set! (-> this values 2 target) (mod (the int (+ 0.5 (-> *target* game eco-pill-dark))) 100))
  (set! (-> this values 3 target) (the-as int (-> *target* fact eco-pill-dark-pickup-time)))
  (if (and (zero? (-> this values 2 target)) (!= (-> *target* game eco-pill-dark) 0.0))
      (set! (-> this values 2 target) 100)
      )
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-health ((this hud-health))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-lower-left-1) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1e :page #x67a)))
  (set! (-> this sprites 0 pos z) #xfffff1)
  (set! (-> this sprites 0 scale-x) 8.0)
  (set! (-> this sprites 0 scale-y) 8.0)
  (set! (-> this sprites 1 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1a :page #x67a)))
  (set! (-> this sprites 1 angle) 32768.0)
  (set! (-> this sprites 1 pos z) #xfffff0)
  (set! (-> this sprites 2 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1e :page #x67a)))
  (set! (-> this sprites 2 pos z) #xfffff3)
  (set! (-> this sprites 2 scale-x) 8.0)
  (set! (-> this sprites 2 scale-y) 8.0)
  (set! (-> this sprites 3 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1a :page #x67a)))
  (set! (-> this sprites 3 angle) 49152.0)
  (set! (-> this sprites 3 pos z) #xfffff2)
  (set! (-> this sprites 4 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1e :page #x67a)))
  (set! (-> this sprites 4 pos z) #xfffff5)
  (set! (-> this sprites 4 scale-x) 8.0)
  (set! (-> this sprites 4 scale-y) 8.0)
  (set! (-> this sprites 5 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1a :page #x67a)))
  (set! (-> this sprites 5 angle) 0.0)
  (set! (-> this sprites 5 pos z) #xfffff4)
  (set! (-> this sprites 6 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1e :page #x67a)))
  (set! (-> this sprites 6 pos z) #xfffff7)
  (set! (-> this sprites 6 scale-x) 8.0)
  (set! (-> this sprites 6 scale-y) 8.0)
  (set! (-> this sprites 7 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1a :page #x67a)))
  (set! (-> this sprites 7 angle) 16384.0)
  (set! (-> this sprites 7 pos z) #xfffff6)
  (set! (-> this sprites 8 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x2 :page #x67a)))
  (set! (-> this sprites 9 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x3 :page #x67a)))
  (set! (-> this sprites 10 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x4 :page #x67a)))
  (set! (-> this sprites 11 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x5 :page #x67a)))
  (set! (-> this sprites 12 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x2e :page #x67a)))
  (set! (-> this sprites 12 flags) (the-as uint 3))
  (set! (-> this sprites 12 scale-x) 0.9)
  (set! (-> this sprites 12 scale-y) 1.0)
  (set! (-> this sprites 13 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x18 :page #x67a)))
  (set! (-> this sprites 13 flags) (the-as uint 3))
  (set! (-> this sprites 13 scale-x) 0.9)
  (set! (-> this sprites 13 scale-y) 1.0)
  (set! (-> this sprites 14 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x18 :page #x67a)))
  (set! (-> this sprites 14 flags) (the-as uint 2))
  (set! (-> this sprites 14 scale-x) 0.9)
  (set! (-> this sprites 14 scale-y) 1.0)
  (set! (-> this sprites 15 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x2e :page #x67a)))
  (set! (-> this sprites 15 flags) (the-as uint 2))
  (set! (-> this sprites 15 scale-x) 0.9)
  (set! (-> this sprites 15 scale-y) 1.0)
  (set! (-> this sprites 16 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x2e :page #x67a)))
  (set! (-> this sprites 16 scale-x) 0.9)
  (set! (-> this sprites 16 scale-y) 1.0)
  (set! (-> this sprites 17 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x18 :page #x67a)))
  (set! (-> this sprites 17 scale-x) 0.9)
  (set! (-> this sprites 17 scale-y) 1.0)
  (set! (-> this sprites 18 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x18 :page #x67a)))
  (set! (-> this sprites 18 flags) (the-as uint 1))
  (set! (-> this sprites 18 scale-x) 0.9)
  (set! (-> this sprites 18 scale-y) 1.0)
  (set! (-> this sprites 19 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x2e :page #x67a)))
  (set! (-> this sprites 19 flags) (the-as uint 1))
  (set! (-> this sprites 19 scale-x) 0.9)
  (set! (-> this sprites 19 scale-y) 1.0)
  (set! (-> this sprites 21 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x3e :page #x67a)))
  0
  (none)
  )

(defmethod draw hud-dark-eco-symbol ((this hud-dark-eco-symbol))
  (let ((v1-0 (process-by-name "hud-health" *active-pool*))
        (f30-0 (-> this offset))
        )
    (if (and v1-0 (< (-> (the-as hud-health v1-0) offset) f30-0))
        (set! f30-0 (-> (the-as hud-health v1-0) offset))
        )
    (set-hud-piece-position!
      (the-as hud-sprite (-> this sprites))
      (if (= (-> *setting-control* user-default aspect-ratio) 'aspect4x3)
          (the int (+ 13.0 (* -130.0 f30-0)))
          (the int (+ 25.0 (* -130.0 f30-0)))
          )
      (the int (+ 299.0 (* 130.0 f30-0)))
      )
    (cond
      ((or (= (-> this values 2 target) 100) (= (-> *target* game eco-pill-dark) 100.0))
       (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x11 :page #x67a)))
       (set-hud-piece-position!
         (the-as hud-sprite (-> this sprites))
         (if (= (-> *setting-control* user-default aspect-ratio) 'aspect4x3)
             (the int (+ 13.0 (* -130.0 f30-0)))
             (the int (+ 25.0 (* -130.0 f30-0)))
             )
         (the int (+ 299.0 (* 130.0 f30-0)))
         )
       (set! (-> this sprites 0 scale-x) 1.5)
       (set! (-> this sprites 0 scale-y) 1.5)
       (let ((v1-31
               (+ (the int (* 15.0 (sin (* 182.04445 (the float (* (-> *display* game-clock frame-counter) 4)))))) 160)
               )
             )
         (set! (-> this sprites 0 color x) v1-31)
         (set! (-> this sprites 0 color y) v1-31)
         (set! (-> this sprites 0 color z) v1-31)
         )
       )
      (else
        (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x10 :page #x67a)))
        (set-hud-piece-position!
          (the-as hud-sprite (-> this sprites))
          (if (= (-> *setting-control* user-default aspect-ratio) 'aspect4x3)
              (the int (+ 29.0 (* -130.0 f30-0)))
              (the int (+ 36.0 (* -130.0 f30-0)))
              )
          (the int (+ 315.0 (* 130.0 f30-0)))
          )
        (set! (-> this sprites 0 scale-x) 1.0)
        (set! (-> this sprites 0 scale-y) 1.0)
        (set! (-> this sprites 0 color x) 128)
        (set! (-> this sprites 0 color y) 128)
        (set! (-> this sprites 0 color z) 128)
        )
      )
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-dark-eco-symbol ((this hud-dark-eco-symbol))
  (set! (-> this values 0 target) (the int (* 10.0 (-> *target* fact health))))
  (set! (-> this values 1 target) (the-as int (-> *target* fact health-pickup-time)))
  (set! (-> this values 2 target) (mod (the int (+ 0.5 (-> *target* game eco-pill-dark))) 100))
  (set! (-> this values 3 target) (the-as int (-> *target* fact eco-pill-dark-pickup-time)))
  (if (and (or (and (zero? (-> this values 2 target)) (!= (-> *target* game eco-pill-dark) 0.0))
               (focus-test? *target* dark)
               )
           (and (not (focus-test? *target* indax)) (-> *setting-control* user-current darkjak))
           )
      (set! (-> this values 2 target) 100)
      )
  (if (= (-> this values 2 target) 100)
      (+! (-> this values 4 target) 1)
      )
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-dark-eco-symbol ((this hud-dark-eco-symbol))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-lower-left-2) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x10 :page #x67a)))
  (set! (-> this sprites 0 scale-x) 1.5)
  (set! (-> this sprites 0 scale-y) 1.5)
  0
  (none)
  )

(define *hud-skullgem* (the-as (pointer hud-skullgem) #f))

(defmethod draw hud-skullgem ((this hud-skullgem))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this icons 0 pos))
    (the int (+ 60.0 (* -130.0 (-> this offset))))
    150
    )
  (set-as-offset-from!
    (the-as hud-sprite (-> this sprites))
    (the-as vector4w (-> this icons 0 pos))
    (if (= (-> *setting-control* user-default aspect-ratio) 'aspect4x3)
        -27
        -35
        )
    20
    )
  (set! (-> this sprites 0 scale-x) (if (= (-> *setting-control* user-default aspect-ratio) 'aspect4x3)
                                        0.86
                                        1.1
                                        )
        )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this icons 0 pos)) 0 45)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-skullgem ((this hud-skullgem))
  (set! (-> this values 0 target) (the int (-> *target* game gem)))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-skullgem ((this hud-skullgem))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-center-left) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (hud-create-icon this 0 (the-as int (art-group-get-by-name *level* "skel-gem" (the-as (pointer uint32) #f))))
  (set! (-> this icons 0 scale-x) 0.025)
  (set! (-> this icons 0 scale-y) 0.035)
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x30 :page #x67a)))
  (set! (-> this sprites 0 scale-x) 0.86)
  (set! (-> this sprites 0 scale-y) 1.05)
  (set! (-> this sprites 0 pos z) #xfff9ff)
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  (set! (-> this strings 0 scale) 0.5)
  0
  (none)
  )

(defmethod draw hud-skill ((this hud-skill))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this icons 0 pos))
    (the int (+ 60.0 (* -130.0 (-> this offset))))
    270
    )
  (set-as-offset-from!
    (the-as hud-sprite (-> this sprites))
    (the-as vector4w (-> this icons 0 pos))
    (if (= (-> *setting-control* user-default aspect-ratio) 'aspect4x3)
        -19
        -25
        )
    -39
    )
  (set! (-> this sprites 0 scale-x) (if (= (-> *setting-control* user-default aspect-ratio) 'aspect4x3)
                                        0.62
                                        0.77
                                        )
        )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this icons 0 pos)) 0 -5)
  (when (not (paused?))
    (let ((s5-1 (new 'stack-no-clear 'quaternion)))
      (quaternion-axis-angle! s5-1 0.0 1.0 0.0 364.0889)
      (quaternion*! (-> this icons 0 icon 0 root quat) s5-1 (-> this icons 0 icon 0 root quat))
      )
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-skill ((this hud-skill))
  (set! (-> this values 0 target) (the int (-> *target* game skill)))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-skill ((this hud-skill))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-middle-left) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (hud-create-icon
    this
    0
    (the-as int (art-group-get-by-name *level* "skel-skill" (the-as (pointer uint32) #f)))
    )
  (set! (-> this icons 0 scale-x) 0.009)
  (set! (-> this icons 0 scale-y) -0.018)
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x30 :page #x67a)))
  (set! (-> this sprites 0 scale-x) 0.62)
  (set! (-> this sprites 0 scale-y) 1.34)
  (set! (-> this sprites 0 pos z) #xfff9ff)
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  (set! (-> this strings 0 scale) 0.5)
  (logior! (-> this values 0 flags) 1)
  0
  (none)
  )

(defmethod update-value-callback hud-skill ((this hud-skill) (arg0 int) (arg1 int))
  (if (> arg1 0)
     (sound-play "skill-pickup" :pitch 0.5)
     ;;(none)
      )
  0
  (none)
  )

(defmethod draw hud-score ((this hud-score))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 480.0 (* 130.0 (-> this offset))))
    140
    )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) -12 8)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-score ((this hud-score))
  (set! (-> this values 0 target) (the int (-> *game-info* score)))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-score ((this hud-score))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-center-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x14 :page #x67a)))
  (set! (-> this sprites 0 scale-x) 1.5)
  (set! (-> this strings 0 scale) 0.5)
  (set! (-> this sprites 0 flags) (the-as uint 4))
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 flags) (font-flags kerning right large))
  (set! (-> this strings 0 color) (font-color red))
  0
  (none)
  )

(defmethod draw hud-timer ((this hud-timer))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    264
    (the int (+ 50.0 (* -100.0 (-> this offset))))
    )
  (format (clear (-> this strings 0 text)) "~1,'0D" (/ (-> this values 0 current) 10))
  (format (clear (-> this strings 1 text)) "~1,'0D" (mod (-> this values 0 current) 10))
  (format (clear (-> this strings 2 text)) ":")
  (format (clear (-> this strings 3 text)) "~1,'0D" (/ (-> this values 1 current) 10))
  (format (clear (-> this strings 4 text)) "~1,'0D" (mod (-> this values 1 current) 10))
  (let ((s5-5 20)
        (s4-0 -42)
        )
    (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) s4-0 -24)
    (let ((s4-1 (+ s4-0 s5-5)))
      (set-as-offset-from! (the-as hud-sprite (-> this strings 1 pos)) (the-as vector4w (-> this sprites)) s4-1 -24)
      (let ((s4-2 (+ s4-1 16)))
        (set-as-offset-from! (the-as hud-sprite (-> this strings 2 pos)) (the-as vector4w (-> this sprites)) s4-2 -24)
        (let ((s4-3 (+ s4-2 16)))
          (set-as-offset-from! (the-as hud-sprite (-> this strings 3 pos)) (the-as vector4w (-> this sprites)) s4-3 -24)
          (let ((a2-13 (+ s4-3 s5-5)))
            (set-as-offset-from!
              (the-as hud-sprite (-> this strings 4 pos))
              (the-as vector4w (-> this sprites))
              a2-13
              -24
              )
            )
          )
        )
      )
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-timer ((this hud-timer))
  (set! (-> this values 0 target) (/ (-> *game-info* timer) #x4650))
  (set! (-> this values 1 target) (/ (mod (-> *game-info* timer) #x4650) 300))
  (let ((v1-8 (abs (- (-> this values 1 target) (-> this values 2 target)))))
    (when (> v1-8 0)
      (set! (-> this values 2 target) (-> this values 1 target))
      (if (and (< (-> this values 0 target) 1) (< (-> this values 1 target) 10))
          (sound-play "timer-warn")
          (sound-play "timer-beep")
          )
      )
    )
  (logclear! (-> this flags) (hud-flags disable))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-timer ((this hud-timer))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-center) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x16 :page #x67a)))
  (set! (-> this sprites 0 flags) (the-as uint 8))
  (set! (-> this sprites 0 scale-x) 2.2)
  (set! (-> this sprites 0 scale-y) 2.0)
  (dotimes (s5-0 5)
    (alloc-string-if-needed this s5-0)
    (set! (-> this strings s5-0 scale) 0.8)
    (set! (-> this strings s5-0 flags) (font-flags kerning middle large))
    (set! (-> this strings s5-0 color) (font-color green))
    )
  (set! (-> this values 2 target) (-> this values 1 target))
  0
  (none)
  )

(defmethod draw hud-big-score ((this hud-big-score))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    264
    (the int (+ 50.0 (* -100.0 (-> this offset))))
    )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) -7 -24)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-big-score ((this hud-big-score))
  (set! (-> this values 0 target) (the int (-> *game-info* score)))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-big-score ((this hud-big-score))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-center) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x16 :page #x67a)))
  (set! (-> this sprites 0 flags) (the-as uint 8))
  (set! (-> this sprites 0 scale-x) 2.7)
  (set! (-> this sprites 0 scale-y) 2.0)
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.8)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  (set! (-> this strings 0 color) (font-color green))
  0
  (none)
  )

(defmethod draw hud-goal ((this hud-goal))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 65.0 (* -130.0 (-> this offset))))
    70
    )
  (format (clear (-> this strings 0 text)) "~D" (-> this values 0 current))
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) 0 -8)
  (set-as-offset-from! (the-as hud-sprite (-> this strings 1 pos)) (the-as vector4w (-> this sprites)) 0 -40)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-goal ((this hud-goal))
  (set! (-> this values 0 target) (the int (-> *game-info* goal)))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-goal ((this hud-goal))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-left) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x14 :page #x67a)))
  (set! (-> this sprites 0 scale-x) 1.2)
  (set! (-> this sprites 0 flags) (the-as uint 8))
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.5)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  (set! (-> this strings 0 color) (font-color red))
  (alloc-string-if-needed this 1)
  (set! (-> this strings 1 scale) 0.75)
  (set! (-> this strings 1 flags) (font-flags kerning middle large))
  (set! (-> this strings 1 color) (font-color red))
  (let ((s5-0 format)
        (gp-1 (clear (-> this strings 1 text)))
        (s4-0 "~S")
        )
    (format (clear *temp-string*) (lookup-text! *common-text* (text-id highscore-text-goal) #f))
    (s5-0 gp-1 s4-0 *temp-string*)
    )
  0
  (none)
  )

(defmethod draw hud-miss ((this hud-miss))
  (set-hud-piece-position!
    (the-as hud-sprite (-> this sprites))
    (the int (+ 448.0 (* 130.0 (-> this offset))))
    70
    )
  (format (clear (-> this strings 0 text)) "~D/~D" (-> this values 0 current) (-> this values 1 current))
  (let ((s5-1 format)
        (s4-0 (clear (-> this strings 1 text)))
        (s3-0 "~S")
        )
    (format (clear matt-str) (lookup-text! *common-text* (text-id miss) #f))
    (s5-1 s4-0 s3-0 matt-str)
    )
  (set-as-offset-from! (the-as hud-sprite (-> this strings 0 pos)) (the-as vector4w (-> this sprites)) 0 -8)
  (set-as-offset-from! (the-as hud-sprite (-> this strings 1 pos)) (the-as vector4w (-> this sprites)) 0 -40)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-miss ((this hud-miss))
  (set! (-> this values 0 target) (the int (-> *game-info* miss)))
  (set! (-> this values 1 target) (the int (-> *game-info* miss-max)))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-miss ((this hud-miss))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x14 :page #x67a)))
  (set! (-> this sprites 0 scale-x) 1.2)
  (set! (-> this sprites 0 flags) (the-as uint 8))
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 scale) 0.5)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  (set! (-> this strings 0 color) (font-color red))
  (alloc-string-if-needed this 1)
  (set! (-> this strings 1 scale) 0.75)
  (set! (-> this strings 1 flags) (font-flags kerning middle large))
  (set! (-> this strings 1 color) (font-color red))
  0
  (none)
  )

(defmethod draw hud-progress ((this hud-progress))
  (with-pp
    (let ((f0-0 (if (process-by-name "hud-timer" *active-pool*)
                    65.0
                    35.0
                    )
                )
          )
      (seek! (-> this sprites 2 scale-y) f0-0 (* 2.0 (-> pp clock time-adjust-ratio)))
      )
    (set-hud-piece-position!
      (the-as hud-sprite (-> this sprites))
      256
      (the int (+ (* -100.0 (-> this offset)) (-> this sprites 2 scale-y)))
      )
    (set-as-offset-from!
      (-> this sprites 1)
      (the-as vector4w (-> this sprites))
      (+ (the int (* 0.09 (the float (-> this values 0 current)))) -42)
      0
      )
    ((method-of-type hud draw) this)
    0
    (none)
    )
  )

(defmethod update-values hud-progress ((this hud-progress))
  (set! (-> this values 0 target) (the int (* 1000.0 (-> *game-info* distance))))
  (logclear! (-> this flags) (hud-flags disable))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-progress ((this hud-progress))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-center-2) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x33 :page #x67a)))
  (set! (-> this sprites 0 flags) (the-as uint 8))
  (set! (-> this sprites 0 scale-x) 1.2)
  (set! (-> this sprites 0 scale-y) 1.2)
  (set! (-> this sprites 1 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x34 :page #x67a)))
  (set! (-> this sprites 1 flags) (the-as uint 8))
  (set! (-> this sprites 1 scale-x) 1.8)
  (set! (-> this sprites 1 scale-y) 1.8)
  (set! (-> this sprites 2 scale-y) (if (process-by-name "hud-timer" *active-pool*)
                                        65.0
                                        35.0
                                        )
        )
  0
  (none)
  )

(defmethod draw hud-gun ((this hud-gun))
  (local-vars (s3-0 int) (sv-16 int) (sv-32 dma-buffer))
  (let ((s4-0 0)
        (s5-0 0)
        )
    0
    (let ((s2-0 20))
      (cond
        ((= (-> this values 0 current) 1)
         (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #xf :page #x67a)))
         (set! (-> this sprites 6 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x23 :page #x67a)))
         (set! (-> this sprites 0 scale-x) 1.1)
         (set! (-> this sprites 0 scale-y) 1.5)
         (set! (-> this sprites 1 scale-x) 0.0)
         (set! s5-0 -3)
         (set! s3-0 (the int (-> *FACT-bank* ammo-yellow-max)))
         )
        ((= (-> this values 0 current) 4)
         (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #xd :page #x67a)))
         (set! (-> this sprites 6 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x21 :page #x67a)))
         (set! (-> this sprites 0 scale-x) 1.8)
         (set! (-> this sprites 0 scale-y) 1.6)
         (set! (-> this sprites 1 scale-x) 0.0)
         (set! s4-0 14)
         (set! s3-0 (the int (-> *FACT-bank* ammo-dark-max)))
         (set! s2-0 10)
         )
        ((= (-> this values 0 current) 3)
         (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #xb :page #x67a)))
         (set! (-> this sprites 1 tex) (lookup-texture-by-id (new 'static 'texture-id :index #xc :page #x67a)))
         (set! (-> this sprites 6 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x20 :page #x67a)))
         (set! (-> this sprites 0 scale-x) 1.4)
         (set! (-> this sprites 0 scale-y) 1.4)
         (set! (-> this sprites 1 scale-x) 1.4)
         (set! (-> this sprites 1 scale-y) 1.4)
         (set! s4-0 43)
         (set! s5-0 6)
         (set! s3-0 (the int (-> *FACT-bank* ammo-blue-max)))
         )
        (else
          (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #xe :page #x67a)))
          (set! (-> this sprites 6 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x22 :page #x67a)))
          (set! (-> this sprites 0 scale-x) 1.8)
          (set! (-> this sprites 0 scale-y) 1.6)
          (set! (-> this sprites 1 scale-x) 0.0)
          (set! s4-0 14)
          (set! s5-0 -2)
          (set! s3-0 (the int (-> *FACT-bank* ammo-red-max)))
          (set! s2-0 10)
          )
        )
      (if (logtest? (-> *game-info* features) (game-feature gun-upgrade-ammo))
          (set! s3-0 (* s3-0 2))
          )
      (set-hud-piece-position!
        (the-as hud-sprite (-> this sprites))
        (- (the int (+ 507.0 (* 130.0 (-> this offset)))) s4-0)
        (the int (+ (- 25.0 (the float s5-0)) (* -100.0 (-> this offset))))
        )
      (let ((f30-0 1.0))
        (cond
          ((zero? (-> this values 0 current))
           (set! f30-0 0.0)
           (set! (-> this strings 0 pos 0) 0)
           (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites)) -3 0)
           )
          (else
            (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites)) -4 11)
            (set-as-offset-from!
              (the-as hud-sprite (-> this strings 0 pos))
              (the-as vector4w (-> this sprites))
              (+ s4-0 -70)
              (+ s5-0 18)
              )
            (set-as-offset-from! (-> this sprites 6) (the-as vector4w (-> this sprites)) (+ s4-0 -68) (+ (if (= s2-0 20)
                                                                                                             98
                                                                                                             73
                                                                                                             )
                                                                                                         s5-0
                                                                                                         )
                                 )
            (set! (-> this sprites 6 scale-x) 1.0)
            (let ((s0-0 (mod (-> this values 1 current) s2-0)))
              (if (and (zero? s0-0) (nonzero? (-> this values 1 current)))
                  (set! s0-0 s2-0)
                  )
              (set! sv-32 (-> *display* frames (-> *display* on-screen) global-buf))
              (let ((s1-0 (-> sv-32 base)))
                (set! sv-16 0)
                (while (< sv-16 s2-0)
                  (if (= sv-16 s0-0)
                      (set! (-> this sprites 6 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x24 :page #x67a)))
                      )
                  (draw (-> this sprites 6) sv-32 (-> this level))
                  (+! (-> this sprites 6 pos y) -5)
                  (if (= sv-16 (+ (/ s2-0 2) -1))
                      (set-as-offset-from! (-> this sprites 6) (the-as vector4w (-> this sprites)) (+ s4-0 -83) (+ (if (= s2-0 20)
                                                                                                                       98
                                                                                                                       73
                                                                                                                       )
                                                                                                                   s5-0
                                                                                                                   )
                                           )
                      )
                  (set! sv-16 (+ sv-16 1))
                  )
                (let ((a3-5 (-> sv-32 base)))
                  (let ((v1-67 (the-as dma-packet (-> sv-32 base))))
                    (set! (-> v1-67 dma) (new 'static 'dma-tag :id (dma-tag-id next)))
                    (set! (-> v1-67 vif0) (new 'static 'vif-tag))
                    (set! (-> v1-67 vif1) (new 'static 'vif-tag))
                    (set! (-> sv-32 base) (the-as pointer (&+ v1-67 16)))
                    )
                  (dma-bucket-insert-tag
                    (-> *display* frames (-> *display* on-screen) bucket-group)
                    (bucket-id progress)
                    s1-0
                    (the-as (pointer dma-tag) a3-5)
                    )
                  )
                )
              )
            )
          )
        (set! (-> this sprites 6 scale-x) 0.0)
        (set! (-> this sprites 2 scale-x)
              (if (and (logtest? (-> *target* game features) (game-feature gun))
                       (-> *setting-control* user-current gun)
                       (logtest? (logand (-> *setting-control* user-current features) (game-feature gun-blue))
                                 (-> *target* game features)
                                 )
                       )
                  f30-0
                  0.0
                  )
              )
        (set! (-> this sprites 3 scale-x)
              (if (and (logtest? (-> *target* game features) (game-feature gun))
                       (and (-> *setting-control* user-current gun)
                            (logtest? (logand (-> *setting-control* user-current features) (game-feature gun-dark))
                                      (-> *target* game features)
                                      )
                            )
                       )
                  f30-0
                  0.0
                  )
              )
        (set! (-> this sprites 4 scale-x)
              (if (and (logtest? (-> *target* game features) (game-feature gun))
                       (and (-> *setting-control* user-current gun)
                            (logtest? (logand (-> *setting-control* user-current features) (game-feature gun-red))
                                      (-> *target* game features)
                                      )
                            )
                       )
                  f30-0
                  0.0
                  )
              )
        (set! (-> this sprites 5 scale-x)
              (if (and (logtest? (-> *target* game features) (game-feature gun))
                       (and (-> *setting-control* user-current gun)
                            (logtest? (logand (-> *setting-control* user-current features) (game-feature gun-yellow))
                                      (-> *target* game features)
                                      )
                            )
                       )
                  f30-0
                  0.0
                  )
              )
        )
      )
    (format (clear (-> this strings 0 text)) "~D/~D" (-> this values 1 current) s3-0)
    (set-as-offset-from! (-> this sprites 2) (the-as vector4w (-> this sprites)) (+ s4-0 -110) (+ s5-0 18))
    (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites)) (+ s4-0 -36) (+ s5-0 19))
    (set-as-offset-from! (-> this sprites 4) (the-as vector4w (-> this sprites)) (+ s4-0 -78) (+ s5-0 7))
    (set-as-offset-from! (-> this sprites 5) (the-as vector4w (-> this sprites)) (+ s4-0 -78) (+ s5-0 37))
    )
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-gun ((this hud-gun))
  (cond
    ((focus-test? *target* gun)
     (set! (-> this values 0 target) (the-as int (-> *target* gun gun-type)))
     (set! (-> this values 1 target) (the int (get-gun-ammo (-> *target* fact))))
     (logclear! (-> this flags) (hud-flags disable))
     (logior! (-> this flags) (hud-flags show))
     )
    (else
      (logior! (-> this flags) (hud-flags disable))
      (logclear! (-> this flags) (hud-flags show))
      (send-event this 'hide)
      )
    )
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-gun ((this hud-gun))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-right) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (set! (-> this sprites 0 flags) (the-as uint 4))
  (set! (-> this sprites 2 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x8 :page #x67a)))
  (set! (-> this sprites 3 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x9 :page #x67a)))
  (set! (-> this sprites 4 tex) (lookup-texture-by-id (new 'static 'texture-id :index #xa :page #x67a)))
  (set! (-> this sprites 5 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x7 :page #x67a)))
  (alloc-string-if-needed this 0)
  (set! (-> this strings 0 flags) (font-flags kerning middle large))
  (set! (-> this strings 0 scale) 0.5)
  (logior! (-> this flags) (hud-flags disable))
  0
  (none)
  )

(defmethod draw hud-samos-young ((this hud-samos-young))
  (set-hud-piece-position!
    (-> this sprites 2)
    (the int (+ 30.0 (* -130.0 (-> this offset))))
    (the int (+ 30.0 (* -100.0 (-> this offset))))
    )
  (set! (-> this sprites 0 angle) (* 182.04445 (the float (- 270 (/ (* 90 (-> this values 0 current)) 100)))))
  (set-as-offset-from! (the-as hud-sprite (-> this sprites)) (the-as vector4w (-> this sprites 2)) 40 16)
  (set-as-offset-from! (-> this sprites 1) (the-as vector4w (-> this sprites 2)) 1 16)
  (set-as-offset-from! (-> this sprites 3) (the-as vector4w (-> this sprites 2)) 7 5)
  ((method-of-type hud draw) this)
  0
  (none)
  )

(defmethod update-values hud-samos-young ((this hud-samos-young))
  (set! (-> this values 0 target) (the int (* 100.0 (-> *game-info* bot-health 0))))
  ((method-of-type hud update-values) this)
  0
  (none)
  )

(defmethod init-callback hud-samos-young ((this hud-samos-young))
  (set! (-> this gui-id)
        (add-process *gui-control* this (gui-channel hud-upper-left) (gui-action hidden) (-> this name) 81920.0 0)
        )
  (logior! (-> this flags) (hud-flags show))
  (set! (-> this sprites 0 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x1e :page #x67a)))
  (set! (-> this sprites 0 scale-x) 12.0)
  (set! (-> this sprites 0 scale-y) 11.2)
  (set! (-> this sprites 0 pos z) #xfffff2)
  (set! (-> this sprites 1 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x25 :page #x67a)))
  (set! (-> this sprites 1 pos z) #xfffff0)
  (set! (-> this sprites 2 tex) (lookup-texture-by-id (new 'static 'texture-id :index #x12 :page #x67a)))
  (set! (-> this sprites 2 pos z) #xffffff)
  (set! (-> this sprites 3 tex)
        (lookup-texture-by-name "hud-samos-young-head-01" (the-as string #f) (the-as (pointer texture-page) #f))
        )
  (set! (-> this sprites 3 scale-x) 0.8)
  (set! (-> this sprites 3 scale-y) 0.8)
  (set! (-> this sprites 3 pos z) #xffffff)
  0
  (none)
  )

(defun activate-hud ((arg0 target))
  (process-spawn hud-dark-eco-symbol :init hud-init-by-other :to arg0)
  (process-spawn hud-health :init hud-init-by-other :to arg0)
  (process-spawn hud-map :init hud-init-by-other :to arg0)
  (set! *hud-skullgem* (process-spawn hud-skullgem :init hud-init-by-other :to arg0))
  (process-spawn hud-skill :init hud-init-by-other :to arg0)
  (process-spawn hud-gun :init hud-init-by-other :to arg0)
  0
  (none)
  )
